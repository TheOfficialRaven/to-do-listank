import { initializeApp } from "https://www.gstatic.com/firebasejs/10.8.1/firebase-app.js";
import {
  getDatabase, ref, push, onValue, remove, set, get
} from "https://www.gstatic.com/firebasejs/10.8.1/firebase-database.js";
import {
  getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged, signOut
} from "https://www.gstatic.com/firebasejs/10.8.1/firebase-auth.js";

// Firebase konfigur√°ci√≥ ‚Äì cser√©ld ki a saj√°t adataidra!
const firebaseConfig = {
  apiKey: "AIzaSyBLrDOTSC_bA1mxQpaIfyAz-Eyan26TVT0",
  authDomain: "leads-tracker-app-78b83.firebaseapp.com",
  databaseURL: "https://leads-tracker-app-78b83-default-rtdb.europe-west1.firebasedatabase.app/",
  projectId: "leads-tracker-app-78b83",
  storageBucket: "leads-tracker-app-78b83.appspot.com",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "1:907489703312:web:c4138807d8a7aa96512f15"
};

const app = initializeApp(firebaseConfig);
const db = getDatabase(app);
const auth = getAuth(app);

// DOM elemek ‚Äì Autentik√°ci√≥
const authSection = document.getElementById("auth-section");
const emailInput = document.getElementById("email-input");
const passwordInput = document.getElementById("password-input");
const registerBtn = document.getElementById("register-btn");
const loginBtn = document.getElementById("login-btn");
const logoutBtn = document.getElementById("logout-btn");
const authMessageEl = document.getElementById("auth-message");

// DOM elemek ‚Äì Eredeti list√°k (todo, shop)
// Ezeket a default list√°kat a Firebaseb≈ël t√∂ltj√ºk be, √©s megjelen√≠tj√ºk az egyes√≠tett kont√©nerben.
const tasksUl = document.getElementById("tasks-ul");
const shopUl = document.getElementById("shop-ul");

// DOM elemek ‚Äì Egyes√≠tett lista kont√©ner (default + egy√©ni)
const listsContainer = document.getElementById("lists-container");

// DOM elemek ‚Äì √öj lista l√©trehoz√°sa
const newListSection = document.getElementById("new-list-section");
const customListNameInput = document.getElementById("custom-list-name-input");
const customListCategoryInput = document.getElementById("custom-list-category-input");
const customNewListBtn = document.getElementById("custom-new-list-btn");
const filterCategorySelect = document.getElementById("filter-category");

// Auth √°llapot figyel√©se
onAuthStateChanged(auth, (user) => {
  if (user) {
    authSection.style.display = "none";
    newListSection.style.display = "block";
    document.getElementById("logout-section").style.display = "block";
    // Csak egyszer hozod l√©tre a default list√°kat, ha m√©g nem l√©teznek:
    createDefaultLists(user.uid);
    // Ut√°na bet√∂lt√∂d az √∂sszes list√°t:
    loadUserLists(user.uid);
  } else {
    authSection.style.display = "block";
    newListSection.style.display = "none";
    document.getElementById("logout-section").style.display = "none";
    listsContainer.innerHTML = "";
  }
});

// Regisztr√°ci√≥
registerBtn.addEventListener("click", () => {
  const email = emailInput.value.trim();
  const password = passwordInput.value.trim();
  if (email && password) {
    createUserWithEmailAndPassword(auth, email, password)
      .then((userCredential) => {
        console.log("Sikeres regisztr√°ci√≥:", userCredential.user.email);
        authMessageEl.textContent = `Sikeres regisztr√°ci√≥! √údv√∂zl√ºnk, ${userCredential.user.email}!`;
      })
      .catch((error) => {
        console.error("Regisztr√°ci√≥s hiba:", error.message);
        authMessageEl.textContent = `Regisztr√°ci√≥s hiba: ${error.message}`;
      });
  } else {
    authMessageEl.textContent = "K√©rj√ºk, add meg az email c√≠met √©s a jelsz√≥t!";
  }
});

// Bejelentkez√©s
loginBtn.addEventListener("click", () => {
  const email = emailInput.value.trim();
  const password = passwordInput.value.trim();
  if (email && password) {
    signInWithEmailAndPassword(auth, email, password)
      .then((userCredential) => {
        console.log("Sikeres bejelentkez√©s:", userCredential.user.email);
      })
      .catch((error) => {
        console.error("Bejelentkez√©si hiba:", error.message);
        authMessageEl.textContent = `Bejelentkez√©si hiba: ${error.message}`;
      });
  }
});

// Kijelentkez√©s
logoutBtn.addEventListener("click", () => {
  if (auth.currentUser) {
    signOut(auth)
      .then(() => {
        console.log("Sikeres kijelentkez√©s");
      })
      .catch((error) => {
        console.error("Kijelentkez√©si hiba:", error.message);
      });
  } else {
    console.log("Nincs bejelentkezett felhaszn√°l√≥, nincs mit kijelentkezni.");
  }
});

// L√©trehozza a default list√°kat (Teend≈ëlista √©s Bev√°s√°rl√≥lista), ha m√©g nem l√©teznek
function createDefaultLists(uid) {
  // Detekt√°ljuk az aktu√°lis nyelvet az <html lang="..."> attrib√∫tumb√≥l
  const lang = document.documentElement.lang || "hu"; // ha nincs be√°ll√≠tva, alap√©rtelmezetten magyar
  
  let todoListName, shoppingListName, todoCategory, shoppingCategory;
  if (lang === "en") {
    todoListName = "üìã To-Do List";
    shoppingListName = "üõí Shopping List";
    todoCategory = "Tasks";
    shoppingCategory = "Shopping";
  } else if (lang === "de") {
    todoListName = "üìã Aufgabenliste";
    shoppingListName = "üõí Einkaufsliste";
    todoCategory = "Aufgaben";
    shoppingCategory = "Einkauf";
  } else { // alap√©rtelmezetten magyar
    todoListName = "üìã Teend≈ëlista";
    shoppingListName = "üõí Bev√°s√°rl√≥lista";
    todoCategory = "Feladatok";
    shoppingCategory = "Bev√°s√°rl√°s";
  }

  const userListsRef = ref(db, `users/${uid}/lists`);
  get(userListsRef).then((snapshot) => {
    // Csak akkor hozza l√©tre a default list√°kat, ha m√©g nem l√©teznek
    if (!snapshot.exists()) {
      push(userListsRef, { name: todoListName, category: todoCategory });
      push(userListsRef, { name: shoppingListName, category: shoppingCategory });
    }
  });
}

// Bet√∂ltj√ºk a felhaszn√°l√≥ √∂sszes list√°j√°t (default + egy√©ni)
function loadUserLists(uid) {
  createDefaultLists(uid);
  const userListsRef = ref(db, `users/${uid}/lists`);
  onValue(userListsRef, (snapshot) => {
    listsContainer.innerHTML = "";
    if (snapshot.exists()) {
      // K√©sz√≠t√ºnk egy t√∂mb√∂t az √∂sszes list√°val
      const fullListsArray = Object.entries(snapshot.val()).map(
        ([id, data]) => ({ id, ...data })
      );
      // Sz≈±r√©s: ha a filter nem "all", akkor kisz≈±rj√ºk a kateg√≥ri√°t
      const filterValue = filterCategorySelect.value;
      let filteredListsArray = fullListsArray;
      if (filterValue !== "all") {
        filteredListsArray = fullListsArray.filter(
          list => list.category.toLowerCase() === filterValue.toLowerCase()
        );
      }
      // Renderelj√ºk a sz≈±rt list√°kat
      filteredListsArray.forEach(list => {
        renderListBox(list.id, list.name, list.category, uid);
      });
      // Friss√≠tj√ºk a filter opci√≥kat a teljes list√°b√≥l, de vissza√°ll√≠tjuk a jelenlegi √©rt√©ket
      updateFilterOptions(fullListsArray);
    } else {
      listsContainer.innerHTML = "<p>Nincsenek list√°k.</p>";
    }
  });
}

function updateFilterOptions(listsArray) {
  // Elmentj√ºk a jelenlegi kiv√°laszt√°st
  const currentValue = filterCategorySelect.value;
  filterCategorySelect.innerHTML = `<option value="all">√ñsszes</option>`;
  const categories = new Set(listsArray.map(list => list.category));
  categories.forEach(cat => {
    filterCategorySelect.innerHTML += `<option value="${cat}">${cat}</option>`;
  });
  // Ha volt kiv√°lasztott √©rt√©k, vissza√°ll√≠tjuk
  if (currentValue) {
    filterCategorySelect.value = currentValue;
  }
}


filterCategorySelect.addEventListener("change", () => {
  if (auth.currentUser) {
    loadUserLists(auth.currentUser.uid);
  }
});

// Megjelen√≠ti a lista boxot (default √©s egy√©ni)
function renderListBox(listId, listName, category, uid) {
  const box = document.createElement("div");
  box.classList.add("list-box");
  // A h2-ben a c√≠m egy span-ben van, majd egy "title-icons" kont√©ner a jobb fels≈ë sark√°ban,
  // amely tartalmazza az edit √©s delete gombokat.
  box.innerHTML = `
    <h2>
      <span class="list-title">${listName}</span>
      <div class="title-icons">
        <button class="edit-title-btn" data-list="${listId}">
          <span class="material-icons">edit</span>
        </button>
        <button class="delete-list-btn" data-list="${listId}">
          <span class="material-icons">delete</span>
        </button>
      </div>
    </h2>
    <input type="text" class="item-input" placeholder="√öj elem hozz√°ad√°sa">
    <button class="item-add-btn" data-list="${listId}">Hozz√°ad√°s</button>
    <ul class="items-ul" id="items-${listId}"></ul>
  `;
  listsContainer.appendChild(box);
  loadListItems(uid, listId, box.querySelector(".items-ul"));
}

// Bet√∂lti az adott lista elemeit
function loadListItems(uid, listId, ulElement) {
  const itemsRef = ref(db, `users/${uid}/lists/${listId}/items`);
  onValue(itemsRef, (snapshot) => {
    ulElement.innerHTML = "";
    if (snapshot.exists()) {
      Object.entries(snapshot.val()).forEach(([itemId, item]) => {
        renderListItem(itemId, item.text, item.done, ulElement, listId, uid);
      });
    }
  });
}

// Megjelen√≠ti az egyes listaelemeket
function renderListItem(itemId, text, done, ulElement, listId, uid) {
  const li = document.createElement("li");
  li.classList.toggle("done", done);
  li.innerHTML = `
    <span class="item-text">${text}</span>
    <div class="icons">
      <span class="material-icons done-icon" data-item="${itemId}" data-list="${listId}" data-done="${done}">done</span>
      <span class="material-icons delete-icon" data-item="${itemId}" data-list="${listId}">delete</span>
      <span class="material-icons edit-icon" data-item="${itemId}" data-list="${listId}">edit</span>
    </div>
  `;
  ulElement.appendChild(li);
}

//Lista boxok l√©trehoz√°sa
customNewListBtn.addEventListener("click", () => {
  const listName = document.getElementById("custom-list-name-input").value.trim();
  const category = document.getElementById("custom-list-category-input").value.trim();
  console.log("Custom lista hozz√°ad√°sa:", listName, category);

  if (listName === "") {
    console.warn("√úres lista n√©v!");
    return;
  }
  if (!auth.currentUser) {
    console.warn("Nincs bejelentkezett felhaszn√°l√≥!");
    return;
  }

  // DEFINI√ÅLD A V√ÅLTOZ√ìT, miel≈ëtt push() h√≠vn√°d!
  const userListsRef = ref(db, `users/${auth.currentUser.uid}/lists`);

  let fullName = listName;
  if (category.toLowerCase() === "bev√°s√°rl√°s") {
    fullName = "üõí " + listName;
  } else if (category.toLowerCase() === "feladatok") {
    fullName = "üìã " + listName;
  }

  push(userListsRef, { name: fullName, category: category })
    .then(() => {
      console.log("Custom lista sikeresen hozz√°adva:", fullName);
    })
    .catch((error) => {
      console.error("Hiba a custom lista hozz√°ad√°sakor:", error);
    });

  // T√∂r√∂lj√ºk az inputok tartalm√°t
  document.getElementById("custom-list-name-input").value = "";
  document.getElementById("custom-list-category-input").value = "";
});

// Esem√©nykezel√©s a listaelemekhez
document.addEventListener("click", (e) => {
  // √öj elem hozz√°ad√°sa a lista boxban
  if (e.target.matches(".item-add-btn")) {
    const listId = e.target.dataset.list;
    const inputField = e.target.previousElementSibling;
    const text = inputField.value.trim();
    if (text !== "" && auth.currentUser) {
      const itemsRef = ref(db, `users/${auth.currentUser.uid}/lists/${listId}/items`);
      push(itemsRef, { text: text, done: false });
      inputField.value = "";
    }
  }
  
  // Lista box t√∂rl√©se
  if (e.target.closest(".delete-list-btn")) {
    const listId = e.target.closest(".delete-list-btn").dataset.list;
    remove(ref(db, `users/${auth.currentUser.uid}/lists/${listId}`));
  }
  
  // Listaelem pip√°l√°sa
  if (e.target.matches(".done-icon")) {
    const itemId = e.target.dataset.item;
    const listId = e.target.dataset.list;
    const currentDone = e.target.dataset.done === "true";
    set(ref(db, `users/${auth.currentUser.uid}/lists/${listId}/items/${itemId}/done`), !currentDone);
  }
  
  // Listaelem t√∂rl√©se
  if (e.target.matches(".delete-icon")) {
    const itemId = e.target.dataset.item;
    const listId = e.target.dataset.list;
    remove(ref(db, `users/${auth.currentUser.uid}/lists/${listId}/items/${itemId}`));
  }
  
  // Listaelem inline szerkeszt√©se
  if (e.target.matches(".edit-icon")) {
    const itemId = e.target.dataset.item;
    const listId = e.target.dataset.list;
    const spanEl = e.target.parentElement.previousElementSibling;
    const input = document.createElement("input");
    input.type = "text";
    input.value = spanEl.textContent;
    input.className = "inline-edit-input";
    spanEl.replaceWith(input);
    input.focus();
    input.addEventListener("blur", () => {
      const newText = input.value.trim();
      if (newText !== "") {
        set(ref(db, `users/${auth.currentUser.uid}/lists/${listId}/items/${itemId}/text`), newText);
      }
      const newSpan = document.createElement("span");
      newSpan.className = "item-text";
      newSpan.textContent = newText;
      input.replaceWith(newSpan);
    });
    input.addEventListener("keydown", (ev) => {
      if (ev.key === "Enter") {
        input.blur();
      }
    });
  }

  // Lista box c√≠m√©nek inline szerkeszt√©se
  if (e.target.matches(".edit-title-btn") || e.target.closest(".edit-title-btn")) {
    const btn = e.target.closest(".edit-title-btn");
    const listId = btn.dataset.list;
    // Keress√ºk meg a h2 elemet, amely tartalmazza a listabox c√≠m√©t
    const h2El = btn.closest("h2");
    if (!h2El) return;
    // Keress√ºk meg a c√≠m span elem√©t
    const titleSpan = h2El.querySelector(".list-title");
    if (!titleSpan) return;
    const currentTitle = titleSpan.textContent;
    // Hozzunk l√©tre egy input mez≈ët az inline szerkeszt√©shez
    const input = document.createElement("input");
    input.type = "text";
    input.value = currentTitle;
    input.className = "inline-edit-input";
    // Cser√©lj√ºk le a span-t az inputra
    titleSpan.replaceWith(input);
    input.focus();
    input.addEventListener("blur", () => {
      const newTitle = input.value.trim();
      if (newTitle !== "") {
        set(ref(db, `users/${auth.currentUser.uid}/lists/${listId}/name`), newTitle);
      }
      const newSpan = document.createElement("span");
      newSpan.className = "list-title";
      newSpan.textContent = newTitle || currentTitle;
      input.replaceWith(newSpan);
    });
    input.addEventListener("keydown", (ev) => {
      if (ev.key === "Enter") {
        input.blur();
      }
    });
  }
});

// Hamburger ikon √©s nyelvv√°laszt√≥ men√º kezel√©se
const hamburgerIcon = document.getElementById("hamburger-icon");
const languageDropdown = document.getElementById("language-dropdown");

hamburgerIcon.addEventListener("click", () => {
  // Egyszer≈± toggle: ha nem l√°tszik, megjelen√≠tj√ºk, ha l√°tszik, elrejtj√ºk
  if (languageDropdown.style.display === "none" || languageDropdown.style.display === "") {
    languageDropdown.style.display = "block";
  } else {
    languageDropdown.style.display = "none";
  }
});




// Service Worker regisztr√°ci√≥ (PWA t√°mogat√°s)
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js')
      .then(registration => {
        console.log('ServiceWorker regisztr√°lva:', registration.scope);
      })
      .catch(err => {
        console.error('ServiceWorker regisztr√°ci√≥s hiba:', err);
      });
  });
}
