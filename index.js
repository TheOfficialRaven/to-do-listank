// === IMMEDIATE DEBUG LOGGING ===
console.log('üü¢ EXTERNAL JS FILE LOADING - index.js started');
console.log('üü¢ Script execution beginning at:', new Date().toLocaleTimeString());
console.log('üü¢ If you see this, the JS file is loading properly');

import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
import {
  getDatabase, ref, push, onValue, remove, set, get, query, orderByChild, update
} from "https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js";
import {
  getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged, signOut
} from "https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js";

console.log('üì¶ Firebase imports loaded successfully');

// Firebase konfigur√°ci√≥ ‚Äì cser√©ld ki a saj√°t adataidra!
const firebaseConfig = {
  apiKey: "AIzaSyBLrDOTSC_bA1mxQpaIfyAz-Eyan26TVT0",
  authDomain: "leads-tracker-app-78b83.firebaseapp.com",
  databaseURL: "https://leads-tracker-app-78b83-default-rtdb.europe-west1.firebasedatabase.app/",
  projectId: "leads-tracker-app-78b83",
  storageBucket: "leads-tracker-app-78b83.appspot.com",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "1:907489703312:web:c4138807d8a7aa96512f15"
};

const app = initializeApp(firebaseConfig);
const db = getDatabase(app);
const auth = getAuth(app);

console.log('üîß Firebase initialized, defining PWA functions...');

// ===== IMMEDIATE GLOBAL PWA FUNCTIONS =====
// Ezek azonnal el√©rhet≈ëk lesznek, DOM bet√∂lt√©s n√©lk√ºl is
window.showPWAButton = function() {
  console.log('üîß showPWAButton() called');
  const container = document.getElementById('pwa-floating-install');
  if (container) {
    container.style.display = 'block';
    console.log('‚úÖ PWA button shown');
  } else {
    console.error('‚ùå PWA container not found! DOM might not be ready yet.');
    console.log('üí° Try calling this function after page load');
  }
};

window.hidePWAButton = function() {
  console.log('üîß hidePWAButton() called');
  const container = document.getElementById('pwa-floating-install');
  if (container) {
    container.style.display = 'none';
    console.log('‚úÖ PWA button hidden');
  } else {
    console.error('‚ùå PWA container not found! DOM might not be ready yet.');
  }
};

window.debugPWA = function() {
  console.log('üîß debugPWA() called');
  const container = document.getElementById('pwa-floating-install');
  const btn = document.getElementById('pwa-install-btn');
  const wasRecentlyInstalled = localStorage.getItem('pwa-recently-installed');
  const userDismissedTime = localStorage.getItem('pwa-user-dismissed');
  
  console.log('üîç PWA DEBUG INFO:');
  console.log('  - container found:', !!container);
  console.log('  - button found:', !!btn);
  console.log('  - deferredPrompt:', typeof deferredPrompt !== 'undefined' ? !!deferredPrompt : 'not defined');
  console.log('  - display mode:', window.matchMedia('(display-mode: standalone)').matches ? 'standalone' : 'browser');
  console.log('  - iOS standalone:', window.navigator.standalone === true);
  console.log('  - container display:', container ? container.style.display : 'N/A');
  console.log('  - DOM ready:', document.readyState);
  console.log('  - recently installed:', wasRecentlyInstalled ? new Date(parseInt(wasRecentlyInstalled)).toLocaleString() : 'no');
  console.log('  - user dismissed until:', userDismissedTime ? new Date(parseInt(userDismissedTime)).toLocaleString() : 'no');
  console.log('  - Current timestamp:', new Date().toLocaleTimeString());
  console.log('üí° Use resetPWA() to clear localStorage flags');
};

window.installPWA = function() {
  console.log('üîß installPWA() called');
  const installBtn = document.getElementById('pwa-install-btn');
  if (installBtn) {
    installBtn.click();
    console.log('‚úÖ PWA install triggered');
  } else {
    console.error('‚ùå PWA install button not found! DOM might not be ready yet.');
  }
};

// PWA Reset funkci√≥ fejleszt√©shez
window.resetPWA = function() {
  localStorage.removeItem('pwa-recently-installed');
  localStorage.removeItem('pwa-user-dismissed');
  console.log('üßπ PWA localStorage flags cleared');
  console.log('üîÑ Refresh the page to see install button again');
};

// Test hogy a f√ºggv√©nyek el√©rhet≈ëk-e
console.log('‚úÖ IMMEDIATE PWA functions defined successfully!');
console.log('üîß Test immediately: debugPWA()');
console.log('üì± Available commands: showPWAButton(), hidePWAButton(), debugPWA(), installPWA(), resetPWA()');

// Immediate test
setTimeout(() => {
  console.log('üîß Auto-testing PWA functions after 1 second...');
  if (typeof window.debugPWA === 'function') {
    console.log('‚úÖ debugPWA function is accessible');
  } else {
    console.error('‚ùå debugPWA function is NOT accessible');
  }
}, 1000);

// ===============================================
// üöÄ PROGRESSIVE WEB APP SETUP
// ===============================================

// PWA Installation Prompt
let deferredPrompt = null;
let serviceWorkerRegistration = null;

// Service Worker regisztr√°l√°sa
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('./sw.js')
      .then((registration) => {
        console.log('‚úÖ Service Worker registered successfully:', registration.scope);
        serviceWorkerRegistration = registration;
        
        // Check for updates
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;
          newWorker.addEventListener('statechange', () => {
            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
              console.log('üîÑ New Service Worker available');
              showNotification('üîÑ √öj verzi√≥ el√©rhet≈ë! Friss√≠tsd az oldalt.');
            }
          });
        });
      })
      .catch((error) => {
        console.log('‚ùå Service Worker registration failed:', error);
      });
  });
}

// PWA Install Event
window.addEventListener('beforeinstallprompt', (e) => {
  console.log('üì± PWA install prompt available');
  // Prevent the mini-infobar from appearing on mobile
  e.preventDefault();
  // Stash the event so it can be triggered later
  deferredPrompt = e;
  
  console.log('PWA install prompt ready');
  
  // Ellen≈ërizz√ºk, hogy szabad-e megjelen√≠teni
  setTimeout(() => {
    const wasRecentlyInstalled = localStorage.getItem('pwa-recently-installed');
    const userDismissedRecently = localStorage.getItem('pwa-user-dismissed');
    
    if (!wasRecentlyInstalled && !userDismissedRecently) {
      if (typeof pwaInstall !== 'undefined' && pwaInstall.showInstallButton) {
        pwaInstall.showInstallButton();
        console.log('üì± PWA install button shown');
      }
    } else {
      console.log('üîï PWA install button not shown - user preference/status');
    }
  }, 500); // Kis k√©sleltet√©s, hogy az elem biztosan l√©tezzen
});

// PWA Installed Event
window.addEventListener('appinstalled', (evt) => {
  console.log('‚úÖ PWA was installed');
  showNotification('üéâ Alkalmaz√°s sikeresen telep√≠tve!');
  deferredPrompt = null;
  
  // Jegyezz√ºk meg, hogy telep√≠tett√©k
  localStorage.setItem('pwa-recently-installed', Date.now().toString());
  console.log('üìù PWA installation marked in localStorage');
  
  // Elrejtj√ºk a telep√≠t√©si gombot
  if (typeof pwaInstall !== 'undefined' && pwaInstall.hideInstallButton) {
    pwaInstall.hideInstallButton();
  }
});

// DOM elemek ‚Äì Autentik√°ci√≥
const authSection = document.getElementById("auth-section");
const emailInput = document.getElementById("email-input");
const authPasswordInput = document.getElementById("auth-password-input");
const registerBtn = document.getElementById("register-btn");
const loginBtn = document.getElementById("login-btn");
const logoutBtn = document.getElementById("logout-btn");
const authMessageEl = document.getElementById("auth-message");

// DOM elemek ‚Äì Eredeti list√°k (todo, shop)
// Ezeket a default list√°kat a Firebaseb≈ël t√∂ltj√ºk be, √©s megjelen√≠tj√ºk az egyes√≠tett kont√©nerben.
const tasksUl = document.getElementById("tasks-ul");
const shopUl = document.getElementById("shop-ul");

// DOM elemek ‚Äì Egyes√≠tett lista kont√©ner (default + egy√©ni)
const listsContainer = document.getElementById("lists-container");

// DOM elemek ‚Äì √öj lista l√©trehoz√°sa
const newListSection = document.getElementById("new-list-section");
const customListNameInput = document.getElementById("custom-list-name-input");
const customListCategoryInput = document.getElementById("custom-list-category-input");
const customNewListBtn = document.getElementById("custom-new-list-btn");
const filterCategorySelect = document.getElementById("filter-category");

// Lista √°trendez√©s toggle gomb
const toggleReorderBtn = document.getElementById("toggle-reorder-btn");
let isReorderingEnabled = false;
let sortableInstance = null;

// Modern t√©ma v√°laszt√≥ rendszer
let currentTheme = {
  name: 'default',
  mode: 'light'
};

// H√°tramarad√≥ r√©gi t√©ma v√°ltoz√≥k (kompatibilit√°s√©rt)
let isDarkTheme = false;

// Navig√°ci√≥ √©s √∫j UI elemek
const navTabs = document.querySelectorAll('.nav-tab');
const tabContents = document.querySelectorAll('.tab-content');

// Keres≈ë √©s statisztik√°k
const searchInput = document.getElementById("search-input");
const clearSearchBtn = document.getElementById("clear-search-btn");
const statsPanel = document.getElementById("stats-panel");

// Jegyzetek √©s napt√°r
const newNoteBtn = document.getElementById("new-note-btn");
const noteModal = document.getElementById("note-modal");
const saveNoteBtn = document.getElementById("save-note");
const cancelNoteBtn = document.getElementById("cancel-note");
const noteModalClose = document.getElementById("note-modal-close");

const newEventBtn = document.getElementById("new-event-btn");
const eventModal = document.getElementById("event-modal");
const saveEventBtn = document.getElementById("save-event");
const cancelEventBtn = document.getElementById("cancel-event");
const eventModalClose = document.getElementById("event-modal-close");

// Gyors m≈±veletek
const actionButtons = document.querySelectorAll('.action-btn');

// Gamifik√°ci√≥
let userLevel = 1;
let userXP = 0;
let currentStreak = 0;

// Glob√°lis v√°ltoz√≥k el√©rhet≈ëv√© t√©tele
window.userLevel = userLevel;
window.userXP = userXP;
window.currentStreak = currentStreak;

// Gyors hozz√°ad√°s FAB
const quickAddFab = document.getElementById("quick-add-fab");
const quickAddModal = document.getElementById("quick-add-modal");
const quickAddText = document.getElementById("quick-add-text");
const quickAddListSelect = document.getElementById("quick-add-list-select");
const quickAddSubmit = document.getElementById("quick-add-submit");
const quickAddCancel = document.getElementById("quick-add-cancel");

// Quick task modal elemek
const quickTaskModal = document.getElementById("quick-task-modal");
const quickTaskText = document.getElementById("quick-task-text");
const quickTaskListSelect = document.getElementById("quick-task-list-select");
const quickTaskSubmit = document.getElementById("quick-task-submit");
const quickTaskCancel = document.getElementById("quick-task-cancel");

// Confirmation modal (felt√©telezve, hogy az index.html-ben megvan)
function showConfirmModal(messageKey, callback, isListDeletion = true) {
  const modal = document.getElementById("confirm-modal");
  const confirmMessage = document.getElementById("confirm-message");
  const yesBtn = document.getElementById("confirm-yes");
  const noBtn = document.getElementById("confirm-no");

  const lang = document.documentElement.lang || "hu";
  let message, yesText, noText;
  
  if (isListDeletion) {
    if (lang === "en") {
      message = "Are you sure you want to delete this list?";
      yesText = "Yes";
      noText = "No";
    } else if (lang === "de") {
      message = "Sind Sie sicher, dass Sie diese Liste l√∂schen m√∂chten?";
      yesText = "Ja";
      noText = "Nein";
    } else {
      message = "Biztosan t√∂rl√∂d ezt a list√°t?";
      yesText = "Igen";
      noText = "Nem";
    }
  } else {
    if (lang === "en") {
      message = "Are you sure you want to delete this item?";
      yesText = "Yes";
      noText = "No";
    } else if (lang === "de") {
      message = "Sind Sie sicher, dass Sie dieses Element l√∂schen m√∂chten?";
      yesText = "Ja";
      noText = "Nein";
    } else {
      message = "Biztosan t√∂rl√∂d ezt a listaelemet?";
      yesText = "Igen";
      noText = "Nem";
    }
  }

  confirmMessage.textContent = message;
  yesBtn.textContent = yesText;
  noBtn.textContent = noText;
  modal.style.display = "flex";

  yesBtn.onclick = null;
  noBtn.onclick = null;

  yesBtn.onclick = () => {
    modal.style.display = "none";
    callback(true);
  };

  noBtn.onclick = () => {
    modal.style.display = "none";
    callback(false);
  };
}

// Auth √°llapot figyel√©se
onAuthStateChanged(auth, (user) => {
  if (user) {
    authSection.style.display = "none";
    
    // Modern UI megjelen√≠t√©se
    const mainNav = document.getElementById("main-navigation");
    if (mainNav) mainNav.style.display = "block";
    
    // Dashboard alap√©rtelmezett megjelen√≠t√©se
    const dashboardSection = document.getElementById("dashboard-section");
    if (dashboardSection) {
      dashboardSection.style.display = "block";
      dashboardSection.classList.add("active");
    }
    
    // R√©gi UI elrejt√©se
    const oldNewListSection = document.getElementById("new-list-section");
    if (oldNewListSection) oldNewListSection.style.display = "none";
    
    // Logout button is now in the profile menu - no need to show/hide
    if (quickAddFab) {
      quickAddFab.style.display = "flex"; // FAB gomb megjelen√≠t√©se
    }
    if (statsPanel) {
      statsPanel.style.display = "block"; // Statisztik√°k mindig l√°that√≥ak
    }
    
    // Alapvet≈ë funkci√≥k bet√∂lt√©se
    createDefaultLists(user.uid);
    loadUserLists(user.uid);
    initializeSortable(); // Sortable inicializ√°l√°sa a bejelentkez√©s ut√°n
    
    // √öj funkci√≥k bet√∂lt√©se - azonnali dashboard friss√≠t√©s
    loadUserProgress();
    loadNotes();
    updateDailyQuote();
    
    // updateAchievements csak akkor h√≠vhat√≥, ha a translations m√°r inicializ√°lva van
    // Ez√©rt setTimeout-tal k√©sleltetj√ºk
    setTimeout(() => {
      updateAchievements();
    }, 500);
    
    // Azonnali dashboard friss√≠t√©s
    updateDashboard();
    
    // T√©ma bet√∂lt√©se Firebase-b≈ël
    loadThemeFromFirebase();
    
    // Statisztik√°k friss√≠t√©se kis k√©sleltet√©ssel hogy a list√°k bet√∂lt≈ëdjenek
    setTimeout(() => {
      updateStatistics();
    }, 500); // Csak 0.5 m√°sodperc a list√°k bet√∂lt√©s√©hez
  } else {
    authSection.style.display = "block";
    
    // Modern UI elrejt√©se
    const mainNav = document.getElementById("main-navigation");
    if (mainNav) mainNav.style.display = "none";
    
    tabContents.forEach(content => {
      content.style.display = "none";
      content.classList.remove("active");
    });
    
    // Logout button is now in the profile menu - no need to show/hide
    if (quickAddFab) {
      quickAddFab.style.display = "none"; // FAB gomb elrejt√©se
    }
    if (statsPanel) {
      statsPanel.style.display = "none";
    }
    listsContainer.innerHTML = "";
    // Sortable elt√°vol√≠t√°sa kijelentkez√©skor
    if (sortableInstance) {
      sortableInstance.destroy();
      sortableInstance = null;
    }
    isReorderingEnabled = false;
  }
});

  // Seg√©df√ºggv√©ny a sortable p√©ld√°ny biztons√°gos megsemmis√≠t√©s√©re
  function destroySortableInstance() {
    if (sortableInstance) {
      try {
        // Ellen≈ërizz√ºk, hogy a sortable p√©ld√°ny m√©g √©rv√©nyes-e
        if (sortableInstance.el && sortableInstance.el.parentNode) {
          sortableInstance.destroy();
        }
      } catch (error) {
        console.warn('Error destroying sortable instance:', error);
      }
      sortableInstance = null;
    }
  }

  // Sortable inicializ√°l√°sa √©s kezel√©se
    function initializeSortable() {
    // Biztons√°gosan megsemmis√≠tj√ºk a megl√©v≈ë p√©ld√°nyt
    destroySortableInstance();
  
  // Ellen≈ërizz√ºk, hogy a listsContainer l√©tezik √©s van benne elem
  if (isReorderingEnabled && listsContainer && listsContainer.parentNode) {
    try {
      sortableInstance = Sortable.create(listsContainer, {
        animation: 150,
        ghostClass: 'sortable-ghost',
        onEnd: function(evt) {
          console.log("Drag end event fired");
          if (!listsContainer || !listsContainer.children) {
            console.warn("Lists container no longer exists");
            return;
          }
          
          const children = Array.from(listsContainer.children);
          const updatePromises = children.map((child, index) => {
            const listId = child.getAttribute("data-list-id");
            console.log("Child index:", index, "ListID:", listId);
            if (listId && auth.currentUser) {
              console.log("Updating order for list", listId, "to", index + 1);
              return set(ref(db, `users/${auth.currentUser.uid}/lists/${listId}/order`), index + 1);
            } else {
              return Promise.resolve();
            }
          });
          Promise.all(updatePromises)
            .then(() => {
              console.log("All order updates complete");
              if (auth.currentUser) {
                loadUserLists(auth.currentUser.uid);
              }
            })
            .catch((error) => {
              console.error("Error updating order for one or more lists:", error);
            });
        }
      });
    } catch (error) {
      console.error('Error creating sortable instance:', error);
      sortableInstance = null;
    }
  }
}

// Toggle gomb esem√©nykezel≈ë
if (toggleReorderBtn) {
  toggleReorderBtn.addEventListener("click", () => {
    isReorderingEnabled = !isReorderingEnabled;
    
    if (isReorderingEnabled) {
      // Haszn√°ljuk a getText f√ºggv√©nyt a lokaliz√°ci√≥hoz
      updateButtonText(toggleReorderBtn, getText('lists.disable_reorder') || "√Åtrendez√©s letilt√°sa");
      toggleReorderBtn.classList.add("active");
      if (listsContainer) {
        listsContainer.classList.add("reorder-enabled");
      }
    } else {
      updateButtonText(toggleReorderBtn, getText('lists.reorder') || "√Åtrendez√©s");
      toggleReorderBtn.classList.remove("active");
      if (listsContainer) {
        listsContainer.classList.remove("reorder-enabled");
      }
    }
    
    initializeSortable();
  });
}

// R√©gi t√©ma rendszer elt√°vol√≠tva - modern theme selector haszn√°lata

// Keres≈ë funkcionalit√°s
if (searchInput) {
  searchInput.addEventListener("input", (e) => {
    const searchTerm = e.target.value.toLowerCase();
    filterListsBySearch(searchTerm);
  });
}

if (clearSearchBtn) {
  clearSearchBtn.addEventListener("click", () => {
    if (searchInput) {
      searchInput.value = "";
      filterListsBySearch("");
    }
  });
}

function filterListsBySearch(searchTerm) {
  const listBoxes = document.querySelectorAll('.list-box');
  
  listBoxes.forEach(box => {
    const listTitle = box.querySelector('h2').textContent.toLowerCase();
    const listItems = Array.from(box.querySelectorAll('li .item-text')).map(item => item.textContent.toLowerCase());
    
    const titleMatch = listTitle.includes(searchTerm);
    const itemMatch = listItems.some(item => item.includes(searchTerm));
    
    if (searchTerm === "" || titleMatch || itemMatch) {
      box.style.display = "";
      
      // Highlight matching items
      if (searchTerm !== "") {
        const items = box.querySelectorAll('li .item-text');
        items.forEach(item => {
          const text = item.textContent;
          if (text.toLowerCase().includes(searchTerm)) {
            item.style.backgroundColor = "rgba(16, 185, 129, 0.3)";
          } else {
            item.style.backgroundColor = "";
          }
        });
      } else {
        // Remove highlighting
        const items = box.querySelectorAll('li .item-text');
        items.forEach(item => {
          item.style.backgroundColor = "";
        });
      }
    } else {
      box.style.display = "none";
    }
  });
}

// ==============================================
// üéØ MODERN NAVIG√ÅCI√ì √âS UI KEZEL√âS
// ==============================================

// Tab navig√°ci√≥
navTabs.forEach(tab => {
  tab.addEventListener('click', () => {
    const targetTab = tab.dataset.tab;
    
    // Akt√≠v tab v√°lt√°s
    navTabs.forEach(t => t.classList.remove('active'));
    tab.classList.add('active');
    
    // Tartalom v√°lt√°s
    tabContents.forEach(content => {
      content.classList.remove('active');
      content.style.display = 'none';
    });
    
    const targetContent = document.getElementById(`${targetTab}-section`);
    if (targetContent) {
      targetContent.style.display = 'block';
      targetContent.classList.add('active');
    }
    
    // Speci√°lis kezel√©sek
    if (targetTab === 'calendar') {
      initializeCalendar();
    } else if (targetTab === 'notes') {
      loadNotes();
    } else if (targetTab === 'overview') {
      updateOverview();
    } else if (targetTab === 'achievements') {
      updateAchievements();
    }
  });
});

// Gyors m≈±veletek
actionButtons.forEach(btn => {
  btn.addEventListener('click', () => {
    const action = btn.dataset.action;
    
    switch(action) {
      case 'quick-task':
        // V√°lt√°s a list√°k f√ºlre √©s az els≈ë input mez≈ëre f√≥kusz
        document.querySelector('[data-tab="lists"]').click();
        setTimeout(() => {
          const firstInput = document.querySelector('.item-input');
          if (firstInput) {
            firstInput.focus();
            firstInput.placeholder = "Gyors feladat hozz√°ad√°sa...";
          }
        }, 300);
        break;
      case 'quick-note':
        openNoteModal();
        break;
      case 'quick-event':
        openEventModal();
        break;
    }
  });
});

// ==============================================
// üìí JEGYZETEK KEZEL√âSE
// ==============================================

function openNoteModal(noteId = null) {
  if (noteModal) {
    noteModal.style.display = 'flex';
    
    if (noteId) {
      // Szerkeszt√©s m√≥d
      editNote(noteId);
    } else {
      // √öj jegyzet m√≥d
      clearNoteModal();
      // Vissza√°ll√≠tjuk a ment√©s gombot √∫j jegyzet m√≥dra
      const saveBtn = document.getElementById('save-note');
      if (saveBtn) {
        // Elt√°vol√≠tjuk a r√©gi event listener-t
        saveBtn.removeEventListener('click', saveNote);
        // √öj event listener hozz√°ad√°sa
        saveBtn.addEventListener('click', saveNote);
        saveBtn.textContent = getText ? getText('notes.save') : 'Ment√©s';
      }
      // Modal c√≠m vissza√°ll√≠t√°sa
      const noteModalTitle = document.getElementById('note-modal-title');
      if (noteModalTitle) {
        noteModalTitle.textContent = getText ? getText('notes.note_title') : 'üìí √öj jegyzet';
      }
    }
    
    // Jelsz√≥ mez≈ë megjelen√≠t√©s/elrejt√©s be√°ll√≠t√°sa
    setupPasswordToggle();
  }
}

// Jelsz√≥ mez≈ë megjelen√≠t√©s/elrejt√©s be√°ll√≠t√°sa
function setupPasswordToggle() {
  const privateCheckbox = document.getElementById('note-private');
  const passwordSection = document.getElementById('note-password-section');
  const passwordInput = document.getElementById('note-password');
  
  if (!privateCheckbox || !passwordSection || !passwordInput) return;
  
  // Kezdeti √°llapot be√°ll√≠t√°sa
  togglePasswordSection();
  
  // Esem√©nykezel≈ë a checkbox-ra (csak egyszer adjuk hozz√°)
  privateCheckbox.removeEventListener('change', togglePasswordSection);
  privateCheckbox.addEventListener('change', togglePasswordSection);
  
  function togglePasswordSection() {
    if (privateCheckbox.checked) {
      passwordSection.style.display = 'block';
      passwordInput.required = true;
    } else {
      passwordSection.style.display = 'none';
      passwordInput.required = false;
      passwordInput.value = '';
    }
  }
}

function editNote(noteId) {
  if (!auth.currentUser) return;
  
  const notesRef = ref(db, `users/${auth.currentUser.uid}/notes/${noteId}`);
  get(notesRef).then((snapshot) => {
    if (snapshot.exists()) {
      const noteData = snapshot.val();
      
      // Ha jelsz√≥val v√©dett, k√©rj√ºk be a jelsz√≥t
      if (noteData.hasPassword && noteData.isPrivate) {
        requestPasswordForEdit(noteId, noteData);
      } else {
        // Norm√°l jegyzet szerkeszt√©se
        openEditModal(noteData, noteId);
      }
    }
  });
}

// K√∂zvetlen szerkeszt√©s m√°r feloldott tartalommal (jelsz√≥ modal n√©lk√ºl)
function editNoteDirectly(noteId, title, content, category) {
  if (!auth.currentUser) return;
  
  const notesRef = ref(db, `users/${auth.currentUser.uid}/notes/${noteId}`);
  get(notesRef).then((snapshot) => {
    if (snapshot.exists()) {
      const noteData = snapshot.val();
      
      // Feloldott tartalommal √©p√≠tj√ºk az editableNoteData-t
      const editableNoteData = {
        ...noteData,
        title: title,
        content: content,
        category: category
      };
      
      // K√∂zvetlen√ºl megnyitjuk a szerkeszt≈ë modal-t jelsz√≥ n√©lk√ºl
      openEditModal(editableNoteData, noteId);
    }
  });
}

// Jelsz√≥ bek√©r√©se szerkeszt√©shez
function requestPasswordForEdit(noteId, noteData) {
  const passwordModal = document.getElementById('password-modal');
  const passwordInput = document.getElementById('password-input');
  const passwordError = document.getElementById('password-error');
  const passwordMessage = document.getElementById('password-modal-message');
  
  // Modal megjelen√≠t√©se
  passwordModal.style.display = 'flex';
  passwordMessage.textContent = getText('notes.password_edit_prompt');
  
  // Input mez≈ë tiszt√≠t√°sa √©s f√≥kusz
  passwordInput.value = '';
  passwordError.style.display = 'none';
  setTimeout(() => passwordInput.focus(), 100);
  
  // Enter lenyom√°s√°ra is m≈±k√∂dj√∂n
  passwordInput.onkeypress = (e) => {
    if (e.key === 'Enter') {
      attemptEditUnlock(noteId, noteData);
    }
  };
  
  // Modal gombjai
  document.getElementById('password-submit').onclick = () => attemptEditUnlock(noteId, noteData);
  document.getElementById('password-cancel').onclick = closePasswordModal;
  document.getElementById('password-modal-close').onclick = closePasswordModal;
}

// Szerkeszt√©si felold√°s k√≠s√©rlet
async function attemptEditUnlock(noteId, noteData) {
  const passwordInput = document.getElementById('password-input');
  const passwordError = document.getElementById('password-error');
  const inputPassword = passwordInput.value.trim();
  
  if (!inputPassword) {
    passwordError.textContent = getText('notes.password_error_empty');
    passwordError.style.display = 'block';
    return;
  }
  
  try {
    // Jelsz√≥ ellen≈ërz√©se
    const isValidPassword = await verifyPassword(inputPassword, noteData.passwordHash);
    
    if (isValidPassword) {
      // Sikeres felold√°s - tartalom visszafejt√©se √©s szerkeszt≈ë modal megnyit√°sa
      const decryptedContent = decryptContent(noteData.content, inputPassword);
      
      if (decryptedContent !== null) {
        closePasswordModal();
        // Visszafejtett tartalommal t√∂ltj√ºk fel a szerkeszt≈ë modal-t
        const editableNoteData = {
          ...noteData,
          content: decryptedContent
        };
        openEditModal(editableNoteData, noteId, inputPassword);
              } else {
          passwordError.textContent = getText('notes.password_error_decrypt');
          passwordError.style.display = 'block';
        }
      } else {
        passwordError.textContent = getText('notes.password_error_wrong');
        passwordError.style.display = 'block';
        passwordInput.select();
      }
  } catch (error) {
    console.error('Hiba a jegyzet felold√°sa sor√°n:', error);
    passwordError.textContent = getText('notes.password_error_access');
    passwordError.style.display = 'block';
  }
}

// Szerkeszt≈ë modal megnyit√°sa
function openEditModal(noteData, noteId, currentPassword = '') {
  // Modal megnyit√°sa szerkeszt√©si m√≥dban
  if (noteModal) {
    noteModal.style.display = 'flex';
    
    // Adatok bet√∂lt√©se
    document.getElementById('note-title').value = noteData.title || '';
    document.getElementById('note-content').value = noteData.content || '';
    document.getElementById('note-category').value = noteData.category || 'general';
    document.getElementById('note-private').checked = noteData.isPrivate || false;
    
    // Ha van jelenlegi jelsz√≥, t√∂lts√ºk be
    if (currentPassword) {
      document.getElementById('note-password').value = currentPassword;
    } else {
      // Ha nincs jelsz√≥, hagyjuk √ºresen 
      document.getElementById('note-password').value = '';
    }
    
    // Modal c√≠m√©nek v√°ltoztat√°sa
    document.getElementById('note-modal-title').textContent = getText ? getText('notes.edit_note') : '‚úèÔ∏è Jegyzet szerkeszt√©se';
    
    // Ment√©s gomb √°t√°ll√≠t√°sa
    const saveBtn = document.getElementById('save-note');
    if (saveBtn) {
      // Kl√≥nozzuk a gombot hogy minden event listener elt√°volodjon
      const newSaveBtn = saveBtn.cloneNode(true);
      saveBtn.parentNode.replaceChild(newSaveBtn, saveBtn);
      // √öj event listener hozz√°ad√°sa
      newSaveBtn.addEventListener('click', () => updateNote(noteId));
      newSaveBtn.textContent = getText ? getText('notes.update') : 'Friss√≠t√©s';
    }
    
    // Jelsz√≥ mez≈ë megjelen√≠t√©s/elrejt√©s be√°ll√≠t√°sa
    setupPasswordToggle();
  }
}

async function updateNote(noteId) {
  const title = document.getElementById('note-title').value.trim();
  const content = document.getElementById('note-content').value.trim();
  const category = document.getElementById('note-category').value;
  const isPrivate = document.getElementById('note-private').checked;
  const password = document.getElementById('note-password').value.trim();
  
  if (!title || !content) {
    showNotification('K√©rj√ºk, t√∂ltsd ki a c√≠met √©s a tartalmat!', 'error');
    return;
  }
  
  if (isPrivate && !password) {
    showNotification(getText('notes.password_required'), 'error');
    return;
  }
  
  if (!auth.currentUser) {
    showNotification('Be kell jelentkezned a jegyzet friss√≠t√©s√©hez!', 'error');
    return;
  }
  
  const noteRef = ref(db, `users/${auth.currentUser.uid}/notes/${noteId}`);
  
  try {
    // Ellen≈ërizz√ºk, hogy a jegyzet l√©tezik-e
    const snapshot = await get(noteRef);
    if (snapshot.exists()) {
      // Ha bizalmas, akkor titkos√≠tjuk a tartalmat
      let finalContent = content;
      let hashedPassword = null;
      
      if (isPrivate && password) {
        finalContent = encryptContent(content, password);
        hashedPassword = await hashPassword(password);
      }
      
      const updatedData = {
        title,
        content: finalContent,
        category,
        isPrivate,
        hasPassword: isPrivate && !!password,
        passwordHash: hashedPassword,
        updatedAt: new Date().toISOString()
      };
      
      // Csak akkor friss√≠tj√ºk, ha a jegyzet l√©tezik
      await update(noteRef, updatedData);
      closeNoteModal();
      loadNotes();
      showNotification('‚úèÔ∏è Jegyzet sikeresen friss√≠tve!');
    } else {
      showNotification('A jegyzet nem tal√°lhat√≥!', 'error');
    }
  } catch (error) {
    console.error('Hiba a jegyzet friss√≠t√©se sor√°n:', error);
    showNotification('Hiba t√∂rt√©nt a jegyzet friss√≠t√©se sor√°n.', 'error');
  }
}

function closeNoteModal() {
  if (noteModal) {
    noteModal.style.display = 'none';
    // Vissza√°ll√≠tjuk a modal √°llapot√°t
    clearNoteModal();
    // Vissza√°ll√≠tjuk a ment√©s gombot √∫j jegyzet m√≥dra
    const saveBtn = document.getElementById('save-note');
    if (saveBtn) {
      // Kl√≥nozzuk a gombot hogy minden event listener elt√°volodjon
      const newSaveBtn = saveBtn.cloneNode(true);
      saveBtn.parentNode.replaceChild(newSaveBtn, saveBtn);
      // √öj event listener hozz√°ad√°sa
      newSaveBtn.addEventListener('click', saveNote);
      newSaveBtn.textContent = getText ? getText('notes.save') : 'Ment√©s';
    }
    // Modal c√≠m vissza√°ll√≠t√°sa
    const noteModalTitle = document.getElementById('note-modal-title');
    if (noteModalTitle) {
      noteModalTitle.textContent = getText ? getText('notes.note_title') : 'üìí √öj jegyzet';
    }
  }
}

function clearNoteModal() {
  document.getElementById('note-title').value = '';
  document.getElementById('note-content').value = '';
  document.getElementById('note-category').value = 'general';
  document.getElementById('note-private').checked = false;
  document.getElementById('note-password').value = '';
  
  // Jelsz√≥ mez≈ë elrejt√©se
  const passwordSection = document.getElementById('note-password-section');
  if (passwordSection) {
    passwordSection.style.display = 'none';
  }
}

async function saveNote() {
  const title = document.getElementById('note-title').value.trim();
  const content = document.getElementById('note-content').value.trim();
  const category = document.getElementById('note-category').value;
  const isPrivate = document.getElementById('note-private').checked;
  const password = document.getElementById('note-password').value.trim();
  
  if (!title || !content) {
    alert('K√©rj√ºk, t√∂ltsd ki a c√≠met √©s a tartalmat!');
    return;
  }
  
  if (isPrivate && !password) {
    alert(getText('notes.password_required'));
    return;
  }
  
  if (!auth.currentUser) {
    alert('Be kell jelentkezned a jegyzet ment√©s√©hez!');
    return;
  }
  
  const notesRef = ref(db, `users/${auth.currentUser.uid}/notes`);
  
  try {
    // Ha bizalmas, akkor titkos√≠tjuk a tartalmat
    let finalContent = content;
    let hashedPassword = null;
    
    if (isPrivate && password) {
      finalContent = encryptContent(content, password);
      hashedPassword = await hashPassword(password);
    }
    
    const noteData = {
      title,
      content: finalContent,
      category,
      isPrivate,
      hasPassword: isPrivate && !!password,
      passwordHash: hashedPassword,
      timestamp: Date.now(),
      createdAt: new Date().toISOString()
    };
    
    await push(notesRef, noteData);
    closeNoteModal();
    loadNotes();
    addXP(5); // XP jegyzet ment√©s√©rt
    showNotification(getText('notifications.note_saved'));
    
    // Teljes adatfriss√≠t√©s
    await forceRefreshAllData();
  } catch (error) {
    console.error('Hiba a jegyzet ment√©se sor√°n:', error);
    alert('Hiba t√∂rt√©nt a jegyzet ment√©se sor√°n.');
  }
}

function loadNotes() {
  if (!auth.currentUser) return;
  
  const notesContainer = document.getElementById('notes-container');
  if (!notesContainer) return;
  
  const notesRef = ref(db, `users/${auth.currentUser.uid}/notes`);
  
  onValue(notesRef, (snapshot) => {
    notesContainer.innerHTML = '';
    
    if (snapshot.exists()) {
      const notes = Object.entries(snapshot.val()).map(([id, data]) => ({
        id,
        ...data
      })).sort((a, b) => b.timestamp - a.timestamp);
      
      notes.forEach(note => {
        const noteElement = createNoteElement(note);
        notesContainer.appendChild(noteElement);
      });
    } else {
      notesContainer.innerHTML = `
        <div class="empty-state">
          <h3>üìí M√©g nincsenek jegyzeteid</h3>
          <p>Hozz l√©tre az els≈ë jegyzetedet a fenti gombbal!</p>
        </div>
      `;
    }
  });
}

function createNoteElement(note) {
  const noteCard = document.createElement('div');
  noteCard.className = 'note-card';
  if (note.pinned) noteCard.classList.add('pinned');
  
  // Ha jelsz√≥val v√©dett, adjuk hozz√° a v√©dett oszt√°lyt
  const isPasswordProtected = note.hasPassword && note.isPrivate;
  if (isPasswordProtected) {
    noteCard.classList.add('password-protected');
  }
  
  // Kateg√≥ria ikon
  const categoryIcons = {
    general: 'üìù',
    passwords: 'üîí',
    ideas: 'üí°',
    important: '‚≠ê',
    work: 'üíº',
    personal: 'üë§'
  };
  
  // Tartalom megjelen√≠t√©se - v√©dett vagy normal
  let contentDisplay = note.content;
  let overlayHtml = '';
  
  if (isPasswordProtected) {
    contentDisplay = 'üîí Ez egy jelsz√≥val v√©dett bizalmas jegyzet. A tartalom megtekint√©s√©hez sz√ºks√©ges a jelsz√≥ megad√°sa.';
    overlayHtml = `
      <div class="note-content-overlay">
        <div class="unlock-prompt">
          <span class="material-icons">lock</span>
          <h4>${getText('notes.protected_content')}</h4>
          <p>${getText('notes.password_required_view')}</p>
          <button class="unlock-btn" onclick="requestNotePassword('${note.id}')">
            ${getText('notes.unlock_note')}
          </button>
        </div>
      </div>
    `;
  }
  
  noteCard.innerHTML = `
    <div class="note-header">
      <h4 class="note-title">${categoryIcons[note.category] || 'üìù'} ${note.title}</h4>
      <span class="note-category">${note.category}</span>
    </div>
    <div class="note-content">${contentDisplay}</div>
    <div class="note-actions">
      <button onclick="togglePinNote('${note.id}')" title="${note.pinned ? 'Kiemelt elt√°vol√≠t√°sa' : 'Kiemel√©s'}">
        <span class="material-icons">${note.pinned ? 'push_pin' : 'radio_button_unchecked'}</span>
      </button>
      <button onclick="editNote('${note.id}')" title="Szerkeszt√©s">
        <span class="material-icons">edit</span>
      </button>
      <button onclick="deleteNote('${note.id}')" title="T√∂rl√©s">
        <span class="material-icons">delete</span>
      </button>
      ${note.isPrivate ? '<span class="material-icons" style="color: var(--accent-primary);" title="Bizalmas">lock</span>' : ''}
    </div>
    ${overlayHtml}
  `;
  
  return noteCard;
}

// Jegyzet kiemel√©s/kiemel√©s elt√°vol√≠t√°sa
function togglePinNote(noteId) {
  if (!auth.currentUser) return;
  
  const noteRef = ref(db, `users/${auth.currentUser.uid}/notes/${noteId}`);
  
  get(noteRef).then((snapshot) => {
    if (snapshot.exists()) {
      const currentPinned = snapshot.val().pinned || false;
      
      update(noteRef, { 
        pinned: !currentPinned,
        updatedAt: new Date().toISOString()
      }).then(() => {
        loadNotes();
        updatePinnedNotes();
        showNotification(!currentPinned ? 'üìå Jegyzet kiemelt!' : 'üìå Kiemel√©s elt√°vol√≠tva!');
      });
    }
  });
}

// Jelsz√≥ bek√©r√©se a jegyzet megjelen√≠t√©s√©hez
function requestNotePassword(noteId) {
  const passwordModal = document.getElementById('password-modal');
  const passwordInput = document.getElementById('password-input');
  const passwordError = document.getElementById('password-error');
  
  // Modal megjelen√≠t√©se
  passwordModal.style.display = 'flex';
  
  // Sz√∂vegek be√°ll√≠t√°sa
  const passwordMessage = document.getElementById('password-modal-message');
  if (passwordMessage) {
    passwordMessage.textContent = getText('notes.password_prompt');
  }
  
  // Input mez≈ë tiszt√≠t√°sa √©s f√≥kusz
  passwordInput.value = '';
  passwordError.style.display = 'none';
  setTimeout(() => passwordInput.focus(), 100);
  
  // Enter lenyom√°s√°ra is m≈±k√∂dj√∂n
  passwordInput.onkeypress = (e) => {
    if (e.key === 'Enter') {
      attemptUnlockNote(noteId);
    }
  };
  
  // Modal gombjai
  document.getElementById('password-submit').onclick = () => attemptUnlockNote(noteId);
  document.getElementById('password-cancel').onclick = closePasswordModal;
  document.getElementById('password-modal-close').onclick = closePasswordModal;
}

// Jegyzet felold√°si k√≠s√©rlet
async function attemptUnlockNote(noteId) {
  const passwordInput = document.getElementById('password-input');
  const passwordError = document.getElementById('password-error');
  const inputPassword = passwordInput.value.trim();
  
  if (!inputPassword) {
    passwordError.textContent = getText('notes.password_error_empty');
    passwordError.style.display = 'block';
    return;
  }
  
  if (!auth.currentUser) return;
  
  const noteRef = ref(db, `users/${auth.currentUser.uid}/notes/${noteId}`);
  
  try {
    const snapshot = await get(noteRef);
    if (snapshot.exists()) {
      const noteData = snapshot.val();
      
      // Jelsz√≥ ellen≈ërz√©se
      const isValidPassword = await verifyPassword(inputPassword, noteData.passwordHash);
      
      if (isValidPassword) {
        // Sikeres felold√°s - tartalom visszafejt√©se √©s megjelen√≠t√©se
        const decryptedContent = decryptContent(noteData.content, inputPassword);
        
        if (decryptedContent !== null) {
          showUnlockedNote(noteId, noteData.title, decryptedContent, noteData.category);
          closePasswordModal();
        } else {
          passwordError.textContent = getText('notes.password_error_decrypt');
          passwordError.style.display = 'block';
        }
      } else {
        passwordError.textContent = getText('notes.password_error_wrong');
        passwordError.style.display = 'block';
        passwordInput.select();
      }
    }
  } catch (error) {
    console.error('Hiba a jegyzet felold√°sa sor√°n:', error);
    passwordError.textContent = getText('notes.password_error_access');
    passwordError.style.display = 'block';
  }
}

// Feloldott jegyzet megjelen√≠t√©se
function showUnlockedNote(noteId, title, content, category) {
  const categoryIcons = {
    general: 'üìù',
    passwords: 'üîí',
    ideas: 'üí°',
    important: '‚≠ê',
    work: 'üíº',
    personal: 'üë§'
  };
  
  // √öj modal a feloldott tartalomhoz
  const modal = document.createElement('div');
  modal.className = 'modal';
  modal.style.display = 'flex';
  modal.innerHTML = `
    <div class="modal-content" style="max-width: 600px;">
      <div class="modal-header">
        <h3>${categoryIcons[category] || 'üìù'} ${title}</h3>
        <button class="close-btn">
          <span class="material-icons">close</span>
        </button>
      </div>
      <div class="modal-body">
        <div style="white-space: pre-wrap; line-height: 1.6; color: var(--text-primary);">
          ${content}
        </div>
      </div>
      <div class="modal-footer">
        <button class="primary-btn edit-note-btn">${getText('notes.edit')}</button>
        <button class="secondary-btn close-modal-btn">${getText('notes.close')}</button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // Event listener-ek hozz√°ad√°sa
  const closeBtn = modal.querySelector('.close-btn');
  const editBtn = modal.querySelector('.edit-note-btn');
  const closeModalBtn = modal.querySelector('.close-modal-btn');
  
  closeBtn.addEventListener('click', () => modal.remove());
  closeModalBtn.addEventListener('click', () => modal.remove());
  editBtn.addEventListener('click', () => {
    modal.remove(); // Bez√°rjuk a megtekint≈ë modal-t
    // K√∂zvetlen√ºl nyissuk meg a szerkeszt≈ë modal-t an√©lk√ºl, hogy √∫jra bek√©rn√©nk a jelsz√≥t
    editNoteDirectly(noteId, title, content, category); // Szerkeszt≈ë modal megnyit√°sa
  });
  
  // Kattint√°s a modal h√°tt√©rre bez√°rja
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      modal.remove();
    }
  });
}

// Jelsz√≥ modal bez√°r√°sa
function closePasswordModal() {
  const passwordModal = document.getElementById('password-modal');
  passwordModal.style.display = 'none';
  
  // Esem√©nykezel≈ëk tiszt√≠t√°sa
  document.getElementById('password-input').onkeypress = null;
  document.getElementById('password-submit').onclick = null;
  document.getElementById('password-cancel').onclick = null;
  document.getElementById('password-modal-close').onclick = null;
}

// ==============================================
// üîê JEGYZET TITKOS√çT√ÅS
// ==============================================

// Egyszer≈± jelsz√≥ hash (SHA-256)
async function hashPassword(password) {
  const encoder = new TextEncoder();
  const data = encoder.encode(password);
  const hashBuffer = await crypto.subtle.digest('SHA-256', data);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
}

// Tartalom titkos√≠t√°s (egyszer≈± XOR alap√∫)
function encryptContent(content, password) {
  let encrypted = '';
  for (let i = 0; i < content.length; i++) {
    const charCode = content.charCodeAt(i);
    const keyChar = password.charCodeAt(i % password.length);
    encrypted += String.fromCharCode(charCode ^ keyChar);
  }
  return btoa(encrypted); // Base64 k√≥dol√°s
}

// Tartalom visszafejt√©s
function decryptContent(encryptedContent, password) {
  try {
    const encrypted = atob(encryptedContent); // Base64 dek√≥dol√°s
    let decrypted = '';
    for (let i = 0; i < encrypted.length; i++) {
      const charCode = encrypted.charCodeAt(i);
      const keyChar = password.charCodeAt(i % password.length);
      decrypted += String.fromCharCode(charCode ^ keyChar);
    }
    return decrypted;
  } catch (error) {
    return null; // Hib√°s jelsz√≥ vagy s√©r√ºlt adat
  }
}

// Jelsz√≥ ellen≈ërz√©s
async function verifyPassword(inputPassword, storedHash) {
  const inputHash = await hashPassword(inputPassword);
  return inputHash === storedHash;
}

// ==============================================
// üóìÔ∏è NAPT√ÅR KEZEL√âSE
// ==============================================

let currentDate = new Date();

function initializeCalendar() {
  renderCalendar();
  loadUpcomingEvents();
}

function renderCalendar() {
  const calendarGrid = document.getElementById('calendar-grid');
  const monthYearDisplay = document.getElementById('current-month-year');
  
  if (!calendarGrid || !monthYearDisplay) return;
  
  const year = currentDate.getFullYear();
  const month = currentDate.getMonth();
  
  // H√≥nap n√©v be√°ll√≠t√°sa
  const monthKeys = [
    'january', 'february', 'march', 'april', 'may', 'june',
    'july', 'august', 'september', 'october', 'november', 'december'
  ];
  const monthName = getText(`calendar.months.${monthKeys[month]}`);
  monthYearDisplay.textContent = `${monthName} ${year}`;
  
  // Napt√°r r√°cs t√∂rl√©se
  calendarGrid.innerHTML = '';
  
  // H√©t napjai header
  const dayKeys = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
  const dayNames = dayKeys.map(day => getText(`calendar.days.${day}`));
  dayNames.forEach(day => {
    const dayHeader = document.createElement('div');
    dayHeader.className = 'calendar-day-header';
    dayHeader.textContent = day;
    dayHeader.style.fontWeight = 'bold';
    dayHeader.style.background = 'var(--accent-primary)';
    dayHeader.style.color = 'var(--bg-primary)';
    calendarGrid.appendChild(dayHeader);
  });
  
  // H√≥nap els≈ë napja
  const firstDay = new Date(year, month, 1);
  const lastDay = new Date(year, month + 1, 0);
  const startDate = new Date(firstDay);
  startDate.setDate(startDate.getDate() - (firstDay.getDay() + 6) % 7);
  
  // Napok renderel√©se
  for (let i = 0; i < 42; i++) {
    const currentDay = new Date(startDate);
    currentDay.setDate(startDate.getDate() + i);
    
    const dayElement = document.createElement('div');
    dayElement.className = 'calendar-day';
    dayElement.textContent = currentDay.getDate();
    
    // Mai nap kiemel√©se
    if (isToday(currentDay)) {
      dayElement.classList.add('today');
    }
    
    // M√°s h√≥nap napjai halv√°ny sz√≠nnel
    if (currentDay.getMonth() !== month) {
      dayElement.style.opacity = '0.3';
    }
    
    // Esem√©ny jelz√©se (TODO: implement√°lni az esem√©ny bet√∂lt√©st)
    // if (hasEvent(currentDay)) {
    //   dayElement.classList.add('has-event');
    // }
    
    dayElement.addEventListener('click', () => {
      openEventModal(currentDay);
    });
    
    calendarGrid.appendChild(dayElement);
  }
}

function isToday(date) {
  const today = new Date();
  return date.toDateString() === today.toDateString();
}

// Timezone-safe d√°tum form√°z√°s YYYY-MM-DD form√°tumban
function formatDateToString(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
}

function openEventModal(selectedDate = null, showExistingEvents = false) {
  if (!auth.currentUser) {
    showNotification('‚ö†Ô∏è Be kell jelentkezned az esem√©ny kezel√©s√©hez!');
    return;
  }

  if (eventModal) {
    eventModal.style.display = 'flex';
    clearEventModal(); // Tiszt√≠tsuk meg a modal-t
    
    if (selectedDate) {
      const dateInput = document.getElementById('event-date');
      if (dateInput) {
        const dateStr = formatDateToString(selectedDate);
        dateInput.value = dateStr;
        
        // Csak akkor mutassuk meg a megl√©v≈ë esem√©nyeket, ha explicit k√©rj√ºk
        if (showExistingEvents) {
          const eventsRef = ref(db, `users/${auth.currentUser.uid}/events`);
          get(eventsRef).then((snapshot) => {
            if (snapshot.exists()) {
              const dayEvents = Object.entries(snapshot.val())
                .filter(([id, data]) => data.date === dateStr)
                .map(([id, data]) => ({ id, ...data }));
              
              if (dayEvents.length > 0) {
                showDayEventsModal(dayEvents, dateStr);
              }
            }
          });
        }
      }
    }
  }
}

// Napi esem√©nyek megjelen√≠t√©se t√∂rl√©si opci√≥val
function showDayEventsModal(events, dateStr) {
  if (events.length === 0) return;
  
  const message = `üìÖ ${new Date(dateStr).toLocaleDateString('hu-HU')} - Esem√©nyek:\n\n` +
    events.map(event => `‚Ä¢ ${event.title} ${event.time ? '(' + event.time + ')' : '(Eg√©sz nap)'}`).join('\n') +
    '\n\nSzeretne t√∂r√∂lni valamelyik esem√©nyt?';
  
  if (confirm(message)) {
    // Esem√©nyek list√°z√°sa t√∂rl√©shez
    const eventToDelete = prompt(
      '√çrja be az esem√©ny c√≠m√©t, amit t√∂r√∂lni szeretne:\n\n' +
      events.map((event, index) => `${index + 1}. ${event.title}`).join('\n')
    );
    
    if (eventToDelete) {
      const foundEvent = events.find(event => 
        event.title.toLowerCase().includes(eventToDelete.toLowerCase())
      );
      
      if (foundEvent) {
        deleteEvent(foundEvent.id);
      } else {
        showNotification('‚ùå Nem tal√°lhat√≥ ilyen nev≈± esem√©ny!');
      }
    }
  }
}

// Esem√©ny t√∂rl√©se
function deleteEvent(eventId) {
  if (!auth.currentUser) return;
  
  if (confirm('üóëÔ∏è Biztosan t√∂r√∂lni szeretn√©d ezt az esem√©nyt?')) {
    const eventRef = ref(db, `users/${auth.currentUser.uid}/events/${eventId}`);
    
    remove(eventRef).then(() => {
      loadEvents();
      renderCalendar();
      showNotification('üóëÔ∏è Esem√©ny sikeresen t√∂r√∂lve!');
    }).catch(error => {
      console.error('Hiba az esem√©ny t√∂rl√©se sor√°n:', error);
      showNotification('‚ùå Hiba t√∂rt√©nt az esem√©ny t√∂rl√©se sor√°n!');
    });
  }
}

function closeEventModal() {
  if (eventModal) {
    eventModal.style.display = 'none';
    clearEventModal();
  }
}

function clearEventModal() {
  document.getElementById('event-title').value = '';
  document.getElementById('event-date').value = '';
  document.getElementById('event-time').value = '';
  document.getElementById('event-description').value = '';
  document.getElementById('event-type').value = 'birthday';
  document.getElementById('event-reminder').checked = false;
  document.getElementById('reminder-time').disabled = true;
}

// ==============================================
// üèÜ GAMIFIK√ÅCI√ì √âS EREDM√âNYEK
// ==============================================

function addXP(amount) {
  userXP += amount;
  window.userXP = userXP;
  
  // Szint ellen≈ërz√©se
  const newLevel = Math.floor(userXP / 100) + 1;
  if (newLevel > userLevel) {
    userLevel = newLevel;
    window.userLevel = userLevel;
    showLevelUpNotification(newLevel);
  }
  
  updateLevelDisplay();
  saveUserProgress();
}

function updateLevelDisplay() {
  const levelElement = document.getElementById('user-level');
  const xpProgressElement = document.getElementById('xp-progress');
  const xpTextElement = document.getElementById('xp-text');
  
  if (levelElement) levelElement.textContent = userLevel;
  
  const currentLevelXP = userXP % 100;
  const nextLevelXP = 100;
  
  if (xpProgressElement) {
    xpProgressElement.style.width = `${(currentLevelXP / nextLevelXP) * 100}%`;
  }
  
  if (xpTextElement) {
    xpTextElement.textContent = `${currentLevelXP} / ${nextLevelXP} XP`;
  }
}

function showLevelUpNotification(level) {
  showNotification(`üéâ Szint ${level} el√©rve! Gratul√°lunk!`);
}

function showNotification(message) {
  // Egyszer≈± notification
  const notification = document.createElement('div');
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    background: var(--accent-primary);
    color: var(--bg-primary);
    padding: 1rem 2rem;
    border-radius: 10px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    z-index: 3000;
    animation: slideInRight 0.3s ease;
  `;
  notification.textContent = message;
  
  document.body.appendChild(notification);
  
  setTimeout(() => {
    notification.style.animation = 'slideOutRight 0.3s ease';
    setTimeout(() => {
      document.body.removeChild(notification);
    }, 300);
  }, 3000);
}

// ==============================================
// üíæ HALAD√ÅS MENT√âSE √âS BET√ñLT√âSE
// ==============================================

function saveUserProgress() {
  if (!auth.currentUser) return;
  
  const progressRef = ref(db, `users/${auth.currentUser.uid}/progress`);
  const progressData = {
    level: userLevel,
    xp: userXP,
    streak: currentStreak,
    lastActivity: Date.now()
  };
  
  set(progressRef, progressData);
}

function loadUserProgress() {
  if (!auth.currentUser) return;
  
  const progressRef = ref(db, `users/${auth.currentUser.uid}/progress`);
  
  onValue(progressRef, (snapshot) => {
    if (snapshot.exists()) {
      const data = snapshot.val();
      userLevel = data.level || 1;
      userXP = data.xp || 0;
      currentStreak = data.streak || 0;
      
      // Window objektumon is friss√≠tj√ºk
      window.userLevel = userLevel;
      window.userXP = userXP;
      window.currentStreak = currentStreak;
      
      updateLevelDisplay();
      updateStreakDisplay();
    }
  });
}

async function updateStreakDisplay() {
  const streakElement = document.getElementById('current-streak');
  if (!streakElement || !auth.currentUser) return;
  
  try {
    const userActivityData = await getUserActivityData();
    
    // Sorozat sz√°m√≠t√°sa visszafel√© a mai napt√≥l
    let streak = 0;
    let currentDate = new Date();
    
    while (true) {
      const dateStr = formatDateToString(currentDate);
      const activity = getActivityLevelForDate(dateStr, userActivityData);
      
      if (activity > 0) {
        streak++;
        currentDate.setDate(currentDate.getDate() - 1);
      } else {
        break;
      }
      
      // V√©gtelen ciklus elker√ºl√©se
      if (streak > 365) break;
    }
    
    streakElement.textContent = streak;
    currentStreak = streak;
    window.currentStreak = currentStreak;
  } catch (error) {
    console.error('Error updating streak display:', error);
    streakElement.textContent = '0';
    currentStreak = 0;
    window.currentStreak = currentStreak;
  }
}

function updateDailyQuote() {
  const quotes = [
    {
      text: "A legnagyobb dics≈ës√©g nem abban van, hogy sosem bukunk el, hanem abban, hogy minden buk√°s ut√°n felkel√ºnk.",
      author: "Konfuciusz"
    },
    {
      text: "A j√∂v≈ë azoknak tartozik, akik hisznek √°lmaik sz√©ps√©g√©ben.",
      author: "Eleanor Roosevelt"
    },
    {
      text: "Az egyetlen lehetetlen √∫t az, amelyiken nem indulsz el.",
      author: "Tony Robbins"
    },
    {
      text: "A siker 99% izzads√°g √©s 1% inspir√°ci√≥.",
      author: "Thomas Edison"
    },
    {
      text: "Nem az sz√°m√≠t, hogy milyen lassan haladsz, am√≠g nem √°llsz meg.",
      author: "Konfuciusz"
    },
    {
      text: "A v√°ltoz√°s az egyetlen √°lland√≥ dolog az √©letben.",
      author: "H√©rakleitosz"
    },
    {
      text: "Az √∫t ezer m√©rf√∂ld hossz√∫, de minden √∫t egy l√©p√©ssel kezd≈ëdik.",
      author: "Lao Ce"
    }
  ];
  
  // Napi id√©zet kiv√°laszt√°sa a d√°tum alapj√°n
  const today = new Date();
  const dayOfYear = Math.floor((today - new Date(today.getFullYear(), 0, 0)) / 1000 / 60 / 60 / 24);
  const selectedQuote = quotes[dayOfYear % quotes.length];
  
  const quoteText = document.getElementById('quote-text');
  const quoteAuthor = document.getElementById('quote-author');
  
  if (quoteText && quoteAuthor) {
    quoteText.textContent = `"${selectedQuote.text}"`;
    quoteAuthor.textContent = `- ${selectedQuote.author}`;
  }
}

function updateAchievements() {
  const achievementBadges = document.getElementById('achievement-badges');
  if (!achievementBadges) return;
  
  // Ellen≈ërizz√ºk, hogy a translations inicializ√°lva van-e
  if (!translations || Object.keys(translations).length === 0) {
    console.warn('Translations not loaded yet, skipping achievements update');
    return;
  }
  
  const achievements = [
    {
      id: 'first-task',
      icon: 'üéØ',
      condition: () => userXP >= 2,
      xpReward: 5
    },
    {
      id: 'task-master',
      icon: '‚≠ê',
      condition: () => userXP >= 20,
      xpReward: 15
    },
    {
      id: 'list-creator',
      icon: 'üìù',
      condition: () => userXP >= 30,
      xpReward: 20
    },
    {
      id: 'note-taker',
      icon: 'üìí',
      condition: () => userXP >= 25,
      xpReward: 10
    },
    {
      id: 'level-up',
      icon: 'üèÜ',
      condition: () => userLevel >= 2,
      xpReward: 25
    },
    {
      id: 'streak-3',
      icon: 'üî•',
      condition: () => currentStreak >= 3,
      xpReward: 15
    },
    {
      id: 'streak-7',
      icon: 'üëë',
      condition: () => currentStreak >= 7,
      xpReward: 50
    },
    {
      id: 'explorer',
      icon: 'üåü',
      condition: () => userLevel >= 3,
      xpReward: 30
    }
  ];
  
  achievementBadges.innerHTML = '';
  
  achievements.forEach(achievement => {
    const isUnlocked = achievement.condition();
    const badgeElement = document.createElement('div');
    badgeElement.className = `achievement-badge ${isUnlocked ? 'unlocked' : ''}`;
    
    // Progress sz√°m√≠t√°s
    let progressHTML = '';
    if (!isUnlocked) {
      let current = 0;
      let target = 100;
      
      // Specifikus progress logika minden achievementhez
      switch(achievement.id) {
        case 'first-task':
          current = Math.min(userXP, 2);
          target = 2;
          break;
        case 'task-master':
          current = Math.min(userXP, 20);
          target = 20;
          break;
        case 'list-creator':
          current = Math.min(userXP, 30);
          target = 30;
          break;
        case 'note-taker':
          current = Math.min(userXP, 25);
          target = 25;
          break;
        case 'level-up':
          current = userLevel;
          target = 2;
          break;
        case 'streak-3':
          current = Math.min(currentStreak, 3);
          target = 3;
          break;
        case 'streak-7':
          current = Math.min(currentStreak, 7);
          target = 7;
          break;
        case 'explorer':
          current = userLevel;
          target = 3;
          break;
      }
      
      const progressPercentage = Math.min((current / target) * 100, 100);
      
      progressHTML = `
        <div class="achievement-progress">
          <div class="progress-bar">
            <div class="progress-fill" style="width: ${progressPercentage}%"></div>
          </div>
          <div class="progress-text">${current}/${target}</div>
        </div>
      `;
    }
    
    const title = getText(`achievements.${achievement.id.replace('-', '_')}.title`);
    const description = getText(`achievements.${achievement.id.replace('-', '_')}.description`);
    
          const unlockedText = isUnlocked ? 'üîì ' + (currentLanguage === 'en' ? 'Unlocked!' : currentLanguage === 'de' ? 'Erreicht!' : 'El√©rve!') : 
                                           'üîí ' + (currentLanguage === 'en' ? 'Locked' : currentLanguage === 'de' ? 'Gesperrt' : 'Z√°rva');
      
      badgeElement.innerHTML = `
        <div class="badge-icon">${achievement.icon}</div>
        <div class="badge-title">${title}</div>
        <div class="badge-description">${description}</div>
        <div class="badge-${isUnlocked ? 'unlocked' : 'locked'}">${unlockedText}</div>
        ${progressHTML}
      `;
    
    achievementBadges.appendChild(badgeElement);
  });
}

// Event listeners hozz√°ad√°sa
if (newNoteBtn) newNoteBtn.addEventListener('click', () => openNoteModal());
if (saveNoteBtn) {
  // Elt√°vol√≠tjuk a r√©gi event listener-t
  saveNoteBtn.removeEventListener('click', saveNote);
  // √öj event listener hozz√°ad√°sa
  saveNoteBtn.addEventListener('click', saveNote);
}
if (cancelNoteBtn) cancelNoteBtn.addEventListener('click', closeNoteModal);
if (noteModalClose) noteModalClose.addEventListener('click', closeNoteModal);

if (newEventBtn) newEventBtn.addEventListener('click', () => openEventModal());
if (saveEventBtn) saveEventBtn.addEventListener('click', saveEvent);
if (cancelEventBtn) cancelEventBtn.addEventListener('click', closeEventModal);
if (eventModalClose) eventModalClose.addEventListener('click', closeEventModal);

// Napt√°r navig√°ci√≥
const prevMonthBtn = document.getElementById('prev-month');
const nextMonthBtn = document.getElementById('next-month');

if (prevMonthBtn) {
  prevMonthBtn.addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() - 1);
    renderCalendar();
  });
}

if (nextMonthBtn) {
  nextMonthBtn.addEventListener('click', () => {
    currentDate.setMonth(currentDate.getMonth() + 1);
    renderCalendar();
  });
}

// Modal background click bez√°r√°s
[noteModal, eventModal].forEach(modal => {
  if (modal) {
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.style.display = 'none';
      }
    });
  }
});

// Statisztik√°k automatikus friss√≠t√©se - nincs toggle gomb
// A statisztik√°k mindig l√°that√≥ak √©s automatikusan friss√ºlnek

function updateStatistics() {
  const listBoxes = document.querySelectorAll('.list-box');
  const totalLists = listBoxes.length;
  
  let totalItems = 0;
  let completedItems = 0;
  
  listBoxes.forEach(box => {
    const items = box.querySelectorAll('li');
    const doneItems = box.querySelectorAll('li.done');
    
    totalItems += items.length;
    completedItems += doneItems.length;
  });
  
  const completionRate = totalItems > 0 ? Math.round((completedItems / totalItems) * 100) : 0;
  
  // Sz√°mok anim√°lt friss√≠t√©se
  animateNumber('total-lists', totalLists);
  animateNumber('total-items', totalItems);
  animateNumber('completed-items', completedItems);
  
  // Progress bar-ok friss√≠t√©se
  updateProgressBar('lists-progress', totalLists, 10); // max 10 lista
  updateProgressBar('items-progress', totalItems, Math.max(50, totalItems)); // dinamikus max
  updateProgressBar('completed-progress', completedItems, totalItems || 1);
  
  // K√∂rdiagram friss√≠t√©se
  updateCircularProgress(completionRate);
}

function animateNumber(elementId, targetValue) {
  const element = document.getElementById(elementId);
  if (!element) return;
  
  const startValue = parseInt(element.textContent) || 0;
  const duration = 1000; // 1 m√°sodperc
  const startTime = performance.now();
  
  function updateNumber(currentTime) {
    const elapsed = currentTime - startTime;
    const progress = Math.min(elapsed / duration, 1);
    
    // Easing function
    const easeOutCubic = 1 - Math.pow(1 - progress, 3);
    const currentValue = Math.round(startValue + (targetValue - startValue) * easeOutCubic);
    
    element.textContent = currentValue;
    
    if (progress < 1) {
      requestAnimationFrame(updateNumber);
    }
  }
  
  requestAnimationFrame(updateNumber);
}

function updateProgressBar(elementId, value, maxValue) {
  const element = document.getElementById(elementId);
  if (!element) return;
  
  const percentage = Math.min((value / maxValue) * 100, 100);
  
  setTimeout(() => {
    element.style.width = percentage + '%';
  }, 300);
}

function updateCircularProgress(percentage) {
  const circle = document.getElementById('completion-circle');
  const percentageText = document.getElementById('completion-percentage');
  
  if (!circle || !percentageText) return;
  
  const circumference = 2 * Math.PI * 15.9155;
  const strokeDasharray = `${(percentage / 100) * circumference} ${circumference}`;
  
  setTimeout(() => {
    circle.style.strokeDasharray = strokeDasharray;
    percentageText.textContent = percentage + '%';
  }, 500);
}

// Gyors hozz√°ad√°s FAB funkci√≥k
if (quickAddFab) {
  quickAddFab.addEventListener("click", () => {
    populateQuickAddListSelect();
    if (quickAddModal) {
      quickAddModal.style.display = "flex";
    }
    if (quickAddText) {
      quickAddText.focus();
    }
  });
}

if (quickAddCancel) {
  quickAddCancel.addEventListener("click", () => {
    if (quickAddModal) {
      quickAddModal.style.display = "none";
    }
    if (quickAddText) {
      quickAddText.value = "";
    }
    if (quickAddListSelect) {
      quickAddListSelect.value = "";
    }
  });
}

if (quickAddSubmit) {
  quickAddSubmit.addEventListener("click", () => {
    const text = quickAddText ? quickAddText.value.trim() : "";
    const selectedListId = quickAddListSelect ? quickAddListSelect.value : "";
    
    if (text && selectedListId && auth.currentUser) {
      // Elem hozz√°ad√°sa a kiv√°lasztott list√°hoz
      const itemsRef = ref(db, `users/${auth.currentUser.uid}/lists/${selectedListId}/items`);
      push(itemsRef, {
        text: text,
        done: false,
        timestamp: Date.now()
      }).then(() => {
        console.log("Gyors elem hozz√°adva!");
        if (quickAddModal) {
          quickAddModal.style.display = "none";
        }
        if (quickAddText) {
          quickAddText.value = "";
        }
        if (quickAddListSelect) {
          quickAddListSelect.value = "";
        }
        loadUserLists(auth.currentUser.uid); // List√°k √∫jrat√∂lt√©se
      }).catch((error) => {
        console.error("Hiba az elem hozz√°ad√°sa sor√°n:", error);
      });
    }
  });
}

// Quick task modal event listeners
if (quickTaskCancel) {
  quickTaskCancel.addEventListener("click", () => {
    closeQuickTaskModal();
  });
}

if (quickTaskSubmit) {
  quickTaskSubmit.addEventListener("click", () => {
    submitQuickTask();
  });
}

// Enter key support for quick task
if (quickTaskText) {
  quickTaskText.addEventListener("keypress", (e) => {
    if (e.key === "Enter") {
      submitQuickTask();
    }
  });
}

// Click outside to close quick task modal
if (quickTaskModal) {
  quickTaskModal.addEventListener("click", (e) => {
    if (e.target === quickTaskModal) {
      closeQuickTaskModal();
    }
  });
}

function populateQuickAddListSelect() {
  if (!quickAddListSelect) return;
  
  const defaultText = getText('modals.quick_add.select_list');
  quickAddListSelect.innerHTML = `<option value="">${defaultText}</option>`;
  
  if (auth.currentUser) {
    // List√°k bet√∂lt√©se a select elembe
    const listsRef = ref(db, `users/${auth.currentUser.uid}/lists`);
    get(listsRef).then((snapshot) => {
      if (snapshot.exists()) {
        const lists = snapshot.val();
        Object.keys(lists).forEach((listId) => {
          const list = lists[listId];
          const option = document.createElement('option');
          option.value = listId;
          option.textContent = list.name || "N√©vtelen lista";
          quickAddListSelect.appendChild(option);
        });
      }
    });
  }
}

// Regisztr√°ci√≥
registerBtn.addEventListener("click", () => {
  const email = emailInput.value.trim();
  const password = authPasswordInput.value.trim();
  if (email && password) {
    createUserWithEmailAndPassword(auth, email, password)
      .then((userCredential) => {
        console.log("Sikeres regisztr√°ci√≥:", userCredential.user.email);
        authMessageEl.textContent = `Sikeres regisztr√°ci√≥! √údv√∂zl√ºnk, ${userCredential.user.email}!`;
      })
      .catch((error) => {
        console.error("Regisztr√°ci√≥s hiba:", error.message);
        authMessageEl.textContent = `Regisztr√°ci√≥s hiba: ${error.message}`;
      });
  } else {
    authMessageEl.textContent = "K√©rj√ºk, add meg az email c√≠met √©s a jelsz√≥t!";
  }
});

// Bejelentkez√©s
loginBtn.addEventListener("click", () => {
  const email = emailInput.value.trim();
  const password = authPasswordInput.value.trim();
  if (email && password) {
    signInWithEmailAndPassword(auth, email, password)
      .then((userCredential) => {
        console.log("Sikeres bejelentkez√©s:", userCredential.user.email);
      })
      .catch((error) => {
        console.error("Bejelentkez√©si hiba:", error.message);
        authMessageEl.textContent = `Bejelentkez√©si hiba: ${error.message}`;
      });
  }
});

// Kijelentkez√©s
logoutBtn.addEventListener("click", () => {
  if (auth.currentUser) {
    signOut(auth)
      .then(() => {
        console.log("Sikeres kijelentkez√©s");
      })
      .catch((error) => {
        console.error("Kijelentkez√©si hiba:", error.message);
      });
  } else {
    console.log("Nincs bejelentkezett felhaszn√°l√≥, nincs mit kijelentkezni.");
  }
});

// L√©trehozza a default list√°kat (Teend≈ëlista √©s Bev√°s√°rl√≥lista), ha m√©g nem l√©teznek
function createDefaultLists(uid) {
  const lang = document.documentElement.lang || "hu";
  let todoListName, shoppingListName, todoCategory, shoppingCategory;
  if (lang === "en") {
    todoListName = "üìã To-Do List";
    shoppingListName = "üõí Shopping List";
    todoCategory = "Tasks";
    shoppingCategory = "Shopping";
  } else if (lang === "de") {
    todoListName = "üìã Aufgabenliste";
    shoppingListName = "üõí Einkaufsliste";
    todoCategory = "Aufgaben";
    shoppingCategory = "Einkauf";
  } else {
    todoListName = "üìã Teend≈ëlista";
    shoppingListName = "üõí Bev√°s√°rl√≥lista";
    todoCategory = "Feladatok";
    shoppingCategory = "Bev√°s√°rl√°s";
  }

  const userListsRef = ref(db, `users/${uid}/lists`);
  get(userListsRef).then((snapshot) => {
    if (!snapshot.exists()) {
      // A default list√°khoz be√°ll√≠tjuk az order √©rt√©ket (p√©ld√°ul 1 √©s 2)
      push(userListsRef, { name: todoListName, category: todoCategory, order: 1 });
      push(userListsRef, { name: shoppingListName, category: shoppingCategory, order: 2 });
    }
  });
}

// Bet√∂ltj√ºk a felhaszn√°l√≥ √∂sszes list√°j√°t (default + egy√©ni)
function loadUserLists(uid) {
  createDefaultLists(uid);
  const userListsRef = ref(db, `users/${uid}/lists`);
  const orderedQuery = query(userListsRef, orderByChild("order"));
  onValue(orderedQuery, (snapshot) => {
    listsContainer.innerHTML = "";
    if (snapshot.exists()) {
      // Haszn√°ljuk a snapshot.forEach() met√≥dust a rendezett t√∂mb l√©trehoz√°s√°hoz
      const fullListsArray = [];
      snapshot.forEach(childSnapshot => {
        const list = childSnapshot.val();
        list.id = childSnapshot.key;
        fullListsArray.push(list);
      });
      
      const filterValue = filterCategorySelect.value;
      let filteredListsArray = fullListsArray;
      if (filterValue !== "all") {
        filteredListsArray = fullListsArray.filter(
          list => list.category.toLowerCase() === filterValue.toLowerCase()
        );
      }
      
      filteredListsArray.forEach(list => {
        renderListBox(list.id, list.name, list.category, uid);
      });
      updateFilterOptions(fullListsArray);
      
      // Statisztik√°k automatikus friss√≠t√©se
      setTimeout(() => {
        updateStatistics();
      }, 500);
    } else {
      const lang = document.documentElement.lang || "hu";
      let noListsMsg = "Nincsenek list√°k.";
      if (lang === "en") {
        noListsMsg = "No lists available.";
      } else if (lang === "de") {
        noListsMsg = "Keine Listen verf√ºgbar.";
      }
      listsContainer.innerHTML = `<p>${noListsMsg}</p>`;
      
      // √úres √°llapotban is friss√≠ts√ºk a statisztik√°kat
      setTimeout(() => {
        updateStatistics();
      }, 100);
    }
  });
}

function updateFilterOptions(listsArray) {
  const currentValue = filterCategorySelect.value;
  
  const allOptionText = getText('lists.all_categories');
  
  let optionsHTML = `<option value="all">${allOptionText}</option>`;
  const categories = new Set(listsArray.map(list => list.category));
  categories.forEach(cat => {
    optionsHTML += `<option value="${cat}">${cat}</option>`;
  });
  filterCategorySelect.innerHTML = optionsHTML;
  if (currentValue) {
    filterCategorySelect.value = currentValue;
  }
}

filterCategorySelect.addEventListener("change", () => {
  if (auth.currentUser) {
    loadUserLists(auth.currentUser.uid);
  }
});

// Megjelen√≠ti a lista boxot (default √©s egy√©ni)
function renderListBox(listId, listName, category, uid) {
  const box = document.createElement("div");
  box.classList.add("list-box");
  // √Åll√≠tsuk be a data-list-id attrib√∫tumot
  box.setAttribute("data-list-id", listId);

  const placeholder = getText('dashboard.item_placeholder');
  const addButtonText = getText('lists.add_item');
  
  box.innerHTML = `
    <h2>
      <span class="list-title">${listName}</span>
      <div class="title-icons">
        <button class="pin-list-btn" data-list="${listId}" title="Kiemel√©s dashboard-ra">
          <span class="material-icons">push_pin</span>
        </button>
        <button class="edit-title-btn" data-list="${listId}">
          <span class="material-icons">edit</span>
        </button>
        <button class="delete-list-btn" data-list="${listId}">
          <span class="material-icons">delete</span>
        </button>
      </div>
    </h2>
    <input type="text" class="item-input" placeholder="${placeholder}" data-list="${listId}">
    <button class="item-add-btn" data-list="${listId}">${addButtonText}</button>
    <ul class="items-ul" id="items-${listId}"></ul>
  `;
  listsContainer.appendChild(box);
  
  // Enter billenty≈± t√°mogat√°s hozz√°ad√°sa
  const itemInput = box.querySelector('.item-input');
  itemInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      const addBtn = e.target.nextElementSibling;
      if (addBtn && addBtn.classList.contains('item-add-btn')) {
        addBtn.click();
      }
    }
  });
  
  loadListItems(uid, listId, box.querySelector(".items-ul"));
}

// Bet√∂lti az adott lista elemeit
function loadListItems(uid, listId, ulElement) {
  const itemsRef = ref(db, `users/${uid}/lists/${listId}/items`);
  onValue(itemsRef, (snapshot) => {
    ulElement.innerHTML = "";
    if (snapshot.exists()) {
      Object.entries(snapshot.val()).forEach(([itemId, item]) => {
        renderListItem(itemId, item.text, item.done, ulElement, listId, uid);
      });
    }
    
    // Statisztik√°k friss√≠t√©se a lista elemek bet√∂lt√©se ut√°n
    setTimeout(() => {
      updateStatistics();
    }, 200);
  });
}

// Megjelen√≠ti az egyes listaelemeket
function renderListItem(itemId, text, done, ulElement, listId, uid) {
  const li = document.createElement("li");
  li.classList.toggle("done", done);
  li.innerHTML = `
    <span class="item-text">${text}</span>
    <div class="icons">
      <span class="material-icons done-icon" data-item="${itemId}" data-list="${listId}" data-done="${done}">done</span>
      <span class="material-icons delete-icon" data-item="${itemId}" data-list="${listId}">delete</span>
      <span class="material-icons edit-icon" data-item="${itemId}" data-list="${listId}">edit</span>
    </div>
  `;
  ulElement.appendChild(li);
}

// √öj lista boxok l√©trehoz√°sa
customNewListBtn.addEventListener("click", () => {
  const listName = customListNameInput.value.trim();
  const category = customListCategoryInput.value.trim();
  console.log("Custom lista hozz√°ad√°sa:", listName, category);

  if (listName === "") {
    const errorMsg = getText('lists.list_name_required') || "K√©rj√ºk, add meg a lista nev√©t!";
    alert(errorMsg);
    customListNameInput.focus();
    return;
  }
  if (!auth.currentUser) {
    console.warn("Nincs bejelentkezett felhaszn√°l√≥!");
    return;
  }

  const userListsRef = ref(db, `users/${auth.currentUser.uid}/lists`);
  
  // Alap√©rtelmezett kateg√≥ria be√°ll√≠t√°sa, ha √ºres
  let finalCategory = category;
  if (!finalCategory) {
    finalCategory = getText('notes.categories.general') || "√Åltal√°nos";
  }
  
  // El≈ësz√∂r lek√©rj√ºk a megl√©v≈ë list√°k maximum order √©rt√©k√©t
  get(userListsRef).then((snapshot) => {
    let maxOrder = 0;
    if (snapshot.exists()) {
      const lists = Object.values(snapshot.val());
      lists.forEach(list => {
        if (list.order && list.order > maxOrder) {
          maxOrder = list.order;
        }
      });
    }
    let fullName = listName;
    
    // Emoji hozz√°ad√°sa kateg√≥ria alapj√°n
    const categoryLower = finalCategory.toLowerCase();
    if (categoryLower === "bev√°s√°rl√°s" || categoryLower === "shopping" || categoryLower === "einkauf") {
      fullName = "üõí " + listName;
    } else if (categoryLower === "feladatok" || categoryLower === "tasks" || categoryLower === "aufgaben") {
      fullName = "üìã " + listName;
    }
    // Az √∫j lista order √©rt√©ke: max + 1
    const newOrder = maxOrder + 1;
    push(userListsRef, { name: fullName, category: finalCategory, order: newOrder })
      .then(() => {
        console.log("Custom lista sikeresen hozz√°adva:", fullName, "order:", newOrder);
        
        // XP hozz√°ad√°sa √∫j lista l√©trehoz√°s√°√©rt
        addXP(10);
        showNotification("üìù +10 XP √∫j lista l√©trehoz√°s√°√©rt!");
        
        // Input mez≈ëk tiszt√≠t√°sa csak sikeres hozz√°ad√°s ut√°n
        customListNameInput.value = "";
        customListCategoryInput.value = "";
        customListNameInput.focus(); // Visszaf√≥kusz√°l az els≈ë input mez≈ëre
      })
      .catch((error) => {
        console.error("Hiba a custom lista hozz√°ad√°sakor:", error);
      });
  });
});

// Esem√©nykezel√©s a listaelemekhez
document.addEventListener("click", (e) => {
  // √öj elem hozz√°ad√°sa a lista boxban
  if (e.target.matches(".item-add-btn")) {
    const listId = e.target.dataset.list;
    const inputField = e.target.previousElementSibling;
    const text = inputField.value.trim();
    if (text !== "" && auth.currentUser) {
      const itemsRef = ref(db, `users/${auth.currentUser.uid}/lists/${listId}/items`);
      push(itemsRef, { text: text, done: false }).then(() => {
        addXP(1); // XP √∫j elem hozz√°ad√°s√©rt
        showNotification("‚ûï +1 XP √∫j elem hozz√°ad√°s√©rt!");
      });
      inputField.value = "";
      inputField.focus(); // Visszaf√≥kusz√°l az input mez≈ëre
    }
  }
  
  // Lista pinel√©se
  if (e.target.closest(".pin-list-btn")) {
    const listId = e.target.closest(".pin-list-btn").dataset.list;
    togglePinList(listId);
  }
  
  // Lista box t√∂rl√©se
  if (e.target.closest(".delete-list-btn")) {
    const listId = e.target.closest(".delete-list-btn").dataset.list;
    showConfirmModal("deleteList", (confirmed) => {
      if (confirmed) {
        remove(ref(db, `users/${auth.currentUser.uid}/lists/${listId}`));
      }
    }, true);
  }
  
  // Listaelem pip√°l√°sa
  if (e.target.matches(".done-icon")) {
    const itemId = e.target.dataset.item;
    const listId = e.target.dataset.list;
    const currentDone = e.target.dataset.done === "true";
    
    set(ref(db, `users/${auth.currentUser.uid}/lists/${listId}/items/${itemId}/done`), !currentDone).then(() => {
      // XP hozz√°ad√°sa elem befejez√©s√©rt
      if (!currentDone) { // Ha √©ppen most lett k√©sz
        addXP(2);
        showNotification("‚úÖ +2 XP elem befejez√©s√©rt!");
      }
    });
  }
  
  // Listaelem t√∂rl√©se
  if (e.target.matches(".delete-icon")) {
    const itemId = e.target.dataset.item;
    const listId = e.target.dataset.list;
    showConfirmModal("deleteItem", (confirmed) => {
      if (confirmed) {
        remove(ref(db, `users/${auth.currentUser.uid}/lists/${listId}/items/${itemId}`));
      }
    }, false);
  }
  
  // Listaelem inline szerkeszt√©se
  if (e.target.matches(".edit-icon")) {
    const itemId = e.target.dataset.item;
    const listId = e.target.dataset.list;
    const spanEl = e.target.parentElement.previousElementSibling;
    const input = document.createElement("input");
    input.type = "text";
    input.value = spanEl.textContent;
    input.className = "inline-edit-input";
    spanEl.replaceWith(input);
    input.focus();
    input.addEventListener("blur", () => {
      const newText = input.value.trim();
      if (newText !== "") {
        set(ref(db, `users/${auth.currentUser.uid}/lists/${listId}/items/${itemId}/text`), newText);
      }
      const newSpan = document.createElement("span");
      newSpan.className = "item-text";
      newSpan.textContent = newText;
      input.replaceWith(newSpan);
    });
    input.addEventListener("keydown", (ev) => {
      if (ev.key === "Enter") {
        input.blur();
      }
    });
  }
  
  // Lista box c√≠m√©nek inline szerkeszt√©se
  if (e.target.matches(".edit-title-btn") || e.target.closest(".edit-title-btn")) {
    const btn = e.target.closest(".edit-title-btn");
    const listId = btn.dataset.list;
    const h2El = btn.closest("h2");
    if (!h2El) return;
    const titleSpan = h2El.querySelector(".list-title");
    if (!titleSpan) return;
    const currentTitle = titleSpan.textContent;
    const input = document.createElement("input");
    input.type = "text";
    input.value = currentTitle;
    input.className = "inline-edit-input";
    titleSpan.replaceWith(input);
    input.focus();
    input.addEventListener("blur", () => {
      const newTitle = input.value.trim();
      if (newTitle !== "") {
        set(ref(db, `users/${auth.currentUser.uid}/lists/${listId}/name`), newTitle);
      }
      const newSpan = document.createElement("span");
      newSpan.className = "list-title";
      newSpan.textContent = newTitle || currentTitle;
      input.replaceWith(newSpan);
    });
    input.addEventListener("keydown", (ev) => {
      if (ev.key === "Enter") {
        input.blur();
      }
    });
  }
});

// Hamburger ikon √©s nyelvv√°laszt√≥ men√º kezel√©se
const hamburgerIcon = document.getElementById("hamburger-icon");
const languageDropdown = document.getElementById("language-dropdown");

hamburgerIcon.addEventListener("click", () => {
  if (languageDropdown.style.display === "none" || languageDropdown.style.display === "") {
    languageDropdown.style.display = "block";
  } else {
    languageDropdown.style.display = "none";
  }
});

// Service Worker regisztr√°ci√≥ (PWA t√°mogat√°s)
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('./sw.js')
      .then(registration => {
        console.log('ServiceWorker regisztr√°lva:', registration.scope);
      })
      .catch(err => {
        console.error('ServiceWorker regisztr√°ci√≥s hiba:', err);
      });
  });
}

// Keyboard shortcuts
document.addEventListener('keydown', (e) => {
  // Ctrl/Cmd + Enter: Gyors elem hozz√°ad√°s
  if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
    const activeElement = document.activeElement;
    if (activeElement && activeElement.classList.contains('item-input')) {
      const addBtn = activeElement.nextElementSibling;
      if (addBtn && addBtn.classList.contains('item-add-btn')) {
        addBtn.click();
      }
    }
  }
});

// Debug inform√°ci√≥ a konzolban
console.log('Todo & Shopping List App initialized');
console.log('Language:', document.documentElement.lang || 'hu');
console.log('Firebase config loaded:', !!firebaseConfig.apiKey);

// Tab navig√°ci√≥ kezel√©se
function initNavigation() {
  const tabs = document.querySelectorAll('.nav-tab');
  const sections = document.querySelectorAll('.tab-content');

  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      const targetTab = tab.dataset.tab;
      
      // Akt√≠v tab friss√≠t√©se
      tabs.forEach(t => t.classList.remove('active'));
      tab.classList.add('active');
      
      // Akt√≠v szekci√≥ friss√≠t√©se
      sections.forEach(section => {
        section.style.display = 'none';
        section.classList.remove('active');
      });
      
      const targetSection = document.getElementById(`${targetTab}-section`);
      if (targetSection) {
        targetSection.style.display = 'block';
        targetSection.classList.add('active');
      }
      
      // Speci√°lis m≈±k√∂d√©s az egyes f√ºlekhez
      if (targetTab === 'dashboard') {
        updateDashboard();
      } else if (targetTab === 'overview') {
        updateOverview();
      } else if (targetTab === 'calendar') {
        renderCalendar();
        loadEvents();
      } else if (targetTab === 'notes') {
        loadNotes();
      }
    });
  });
}

// Dashboard friss√≠t√©se
async function updateDashboard() {
  updateCurrentTime();
  updateTodayEvents();
  updatePinnedItems();
  updateUrgentTasks();
  await updateStreakDisplay();
  updateStatistics(); // Statisztik√°k friss√≠t√©se
  
  // Ha az overview f√ºl akt√≠v, akkor friss√≠ts√ºk az activity graph-ot is
  const overviewTab = document.querySelector('.nav-tab[data-tab="overview"]');
  if (overviewTab && overviewTab.classList.contains('active')) {
    await updateOverview();
  }
}

// Minden adatfriss√≠t≈ë funkci√≥, amit gyakran h√≠vni kell
async function forceRefreshAllData() {
  await updateStreakDisplay();
  await updateOverview();
  updateStatistics();
  updateDashboard();
  updateAchievements();
}

// Dashboard automatikus friss√≠t√©se minden 30 m√°sodpercben
setInterval(() => {
  if (document.querySelector('.nav-tab[data-tab="dashboard"]').classList.contains('active')) {
    updateDashboard();
  }
}, 30000);

// Aktu√°lis id≈ë friss√≠t√©se lokaliz√°ci√≥val
function updateCurrentTime() {
  const now = new Date();
  const dateElement = document.getElementById('current-date');
  const timeElement = document.getElementById('current-time-display');
  
  if (dateElement && timeElement) {
    // Nyelv alap√∫ lokaliz√°ci√≥
    let locale = 'hu-HU';
    switch(currentLanguage) {
      case 'en':
        locale = 'en-US';
        break;
      case 'de':
        locale = 'de-DE';
        break;
      case 'hu':
      default:
        locale = 'hu-HU';
        break;
    }
    
    const options = { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric',
      weekday: 'long'
    };
    
    dateElement.textContent = now.toLocaleDateString(locale, options);
    timeElement.textContent = now.toLocaleTimeString(locale, { 
      hour: '2-digit', 
      minute: '2-digit'
    });
  }
}

// Mai esem√©nyek friss√≠t√©se m√°r implement√°lva fent

// Kiemelt elemek friss√≠t√©se
function updatePinnedItems() {
  updatePinnedNotes();
  updatePinnedTasks();
}

// Kiemelt jegyzetek
function updatePinnedNotes() {
  const pinnedNotesList = document.getElementById('pinned-notes-list');
  if (!pinnedNotesList || !auth.currentUser) return;
  
  const notesRef = ref(db, `users/${auth.currentUser.uid}/notes`);
  
  onValue(notesRef, (snapshot) => {
    if (snapshot.exists()) {
      const notes = Object.entries(snapshot.val())
        .map(([id, data]) => ({ id, ...data }))
        .filter(note => note.pinned)
        .slice(0, 3);
      
      if (notes.length === 0) {
        pinnedNotesList.innerHTML = '<p class="no-pinned">Nincs kiemelt jegyzet</p>';
      } else {
        pinnedNotesList.innerHTML = notes.map(note => `
          <div class="pinned-item" onclick="openNoteForEdit('${note.id}')">
            <span class="pinned-title">${note.title}</span>
            <span class="pinned-category">${getCategoryIcon(note.category)}</span>
          </div>
        `).join('');
      }
    } else {
      pinnedNotesList.innerHTML = '<p class="no-pinned">Nincs kiemelt jegyzet</p>';
    }
  });
}

// Kiemelt feladatok
function updatePinnedTasks() {
  const pinnedTasksList = document.getElementById('pinned-tasks-list');
  if (!pinnedTasksList || !auth.currentUser) return;
  
  const listsRef = ref(db, `users/${auth.currentUser.uid}/lists`);
  
  onValue(listsRef, (snapshot) => {
    if (snapshot.exists()) {
      const pinnedLists = Object.entries(snapshot.val())
        .filter(([id, data]) => data.pinned)
        .slice(0, 3);
      
      if (pinnedLists.length === 0) {
        pinnedTasksList.innerHTML = '<p class="no-pinned">Haszn√°ld a üìå gombot a list√°kn√°l</p>';
      } else {
        pinnedTasksList.innerHTML = pinnedLists.map(([listId, listData]) => `
          <div class="pinned-item" onclick="switchToListsTab('${listId}')">
            <span class="pinned-title">${listData.name}</span>
            <span class="pinned-category">${getCategoryIcon(listData.category)}</span>
          </div>
        `).join('');
      }
    } else {
      pinnedTasksList.innerHTML = '<p class="no-pinned">Haszn√°ld a üìå gombot a list√°kn√°l</p>';
    }
  });
}

// List√°kra v√°lt√°s √©s adott lista megjelen√≠t√©se
function switchToListsTab(listId) {
  // V√°lt√°s a list√°k f√ºlre
  document.querySelector('[data-tab="lists"]').click();
  
  // Kis k√©sleltet√©s ut√°n scroll a list√°hoz
  setTimeout(() => {
    const listElement = document.querySelector(`[data-list-id="${listId}"]`);
    if (listElement) {
      listElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
      listElement.style.border = '2px solid var(--accent-primary)';
      setTimeout(() => {
        listElement.style.border = '';
      }, 2000);
    }
  }, 100);
}

// S√ºrg≈ës feladatok friss√≠t√©se
function updateUrgentTasks() {
  const urgentTasksList = document.getElementById('urgent-tasks-list');
  if (!urgentTasksList || !auth.currentUser) return;
  
  const listsRef = ref(db, `users/${auth.currentUser.uid}/lists`);
  
  onValue(listsRef, (snapshot) => {
    let urgentTasks = [];
    
    if (snapshot.exists()) {
      const lists = snapshot.val();
      
      // S√ºrg≈ës feladatok gy≈±jt√©se (nem k√©sz feladatok + fontosnak megjel√∂lt list√°k)
      Object.entries(lists).forEach(([listId, listData]) => {
        if (listData.items) {
          Object.entries(listData.items).forEach(([itemId, item]) => {
            // S√ºrg≈ës ha: nem k√©sz √âS (r√©gi vagy fontos kateg√≥ri√°b√≥l)
            if (!item.done) {
              const isOld = item.timestamp && (Date.now() - item.timestamp > 7 * 24 * 60 * 60 * 1000); // 7 napn√°l r√©gebbi
              const isImportant = listData.category && ['Fontos', 'Munka', 'important', 'work'].includes(listData.category);
              
              if (isOld || isImportant) {
                urgentTasks.push({
                  id: itemId,
                  listId: listId,
                  text: item.text,
                  listName: listData.name,
                  category: listData.category,
                  isOld: isOld,
                  isImportant: isImportant,
                  pinned: item.pinned || false
                });
              }
            }
          });
        }
      });
    }
    
    // S√ºrg≈ës feladatok megjelen√≠t√©se
    if (urgentTasks.length === 0) {
      urgentTasksList.innerHTML = `<p class="no-urgent" data-i18n="dashboard.no_urgent">${getText('dashboard.no_urgent')}</p>`;
    } else {
      urgentTasksList.innerHTML = urgentTasks.map(task => `
        <div class="urgent-task ${task.pinned ? 'pinned' : ''}" data-task-id="${task.id}" data-list-id="${task.listId}">
          <div class="urgent-task-content">
            <span class="urgent-task-text">${task.text}</span>
            <span class="urgent-task-list">${task.listName}</span>
          </div>
          <div class="urgent-task-actions">
            <button class="pin-btn" onclick="togglePinUrgentTask('${task.listId}', '${task.id}')" title="${getText('common.pin')}">
              ${task.pinned ? 'üìå' : 'üìç'}
            </button>
            <button class="done-btn" onclick="markUrgentTaskDone('${task.listId}', '${task.id}')" title="${getText('common.done')}">
              ‚úì
            </button>
          </div>
        </div>
      `).join('');
    }
  });
}

// √Åttekint√©s friss√≠t√©se
async function updateOverview() {
  updateStatistics();
  updateAchievements();
  await generateActivityCalendar();
  updateProductivityInsights();
}

// Aktivit√°s napt√°r gener√°l√°sa jav√≠tva
async function generateActivityCalendar() {
  const activityCalendar = document.getElementById('activity-calendar');
  if (!activityCalendar) return;
  
  const today = new Date();
  const daysToShow = 70; // 10 h√©t = 70 nap
  const startDate = new Date(today);
  startDate.setDate(today.getDate() - (daysToShow - 1));
  
  let html = '';
  const userActivityData = await getUserActivityData();
  let totalActiveDays = 0;
  let maxStreak = 0;
  let currentStreak = 0;
  let totalActivity = 0;
  
  for (let i = 0; i < daysToShow; i++) {
    const date = new Date(startDate);
    date.setDate(startDate.getDate() + i);
    const dateStr = formatDateToString(date);
    
    // Tev√©kenys√©g szint kisz√°m√≠t√°sa (0-4)
    const activityLevel = getActivityLevelForDate(dateStr, userActivityData);
    const levelClass = activityLevel > 0 ? `level-${activityLevel}` : 'level-0';
    
    if (activityLevel > 0) {
      totalActiveDays++;
      currentStreak++;
      totalActivity += activityLevel;
    } else {
      maxStreak = Math.max(maxStreak, currentStreak);
      currentStreak = 0;
    }
    
    html += `<div class="activity-day ${levelClass}" 
                  title="${date.toLocaleDateString('hu-HU')} - ${getActivityDescription(activityLevel)}" 
                  data-date="${dateStr}"></div>`;
  }
  
  // Final streak check
  maxStreak = Math.max(maxStreak, currentStreak);
  
  activityCalendar.innerHTML = html;
  
  // Statisztik√°k friss√≠t√©se
  updateActivityStats(totalActiveDays, maxStreak, totalActivity / daysToShow);
}

// Felhaszn√°l√≥ aktivit√°si adatainak lek√©r√©se
async function getUserActivityData() {
  if (!auth.currentUser) return {};
  
  const activityData = {};
  
  try {
    // Firebase-b≈ël olvassuk az adatokat
    const promises = [];
    
    // List√°k aktivit√°sa
    promises.push(
      get(ref(db, `users/${auth.currentUser.uid}/lists`)).then(snapshot => {
        if (snapshot.exists()) {
          Object.values(snapshot.val()).forEach(list => {
            if (list.items) {
              Object.values(list.items).forEach(item => {
                if (item.timestamp) {
                  const date = formatDateToString(new Date(item.timestamp));
                  activityData[date] = (activityData[date] || 0) + 1;
                }
              });
            }
          });
        }
      })
    );
    
    // Jegyzetek aktivit√°sa
    promises.push(
      get(ref(db, `users/${auth.currentUser.uid}/notes`)).then(snapshot => {
        if (snapshot.exists()) {
          Object.values(snapshot.val()).forEach(note => {
            if (note.timestamp) {
              const date = formatDateToString(new Date(note.timestamp));
              activityData[date] = (activityData[date] || 0) + 2;
            }
          });
        }
      })
    );
    
    // Esem√©nyek aktivit√°sa
    promises.push(
      get(ref(db, `users/${auth.currentUser.uid}/events`)).then(snapshot => {
        if (snapshot.exists()) {
          Object.values(snapshot.val()).forEach(event => {
            if (event.timestamp) {
              const date = formatDateToString(new Date(event.timestamp));
              activityData[date] = (activityData[date] || 0) + 1;
            }
          });
        }
      })
    );
    
    await Promise.all(promises);
  } catch (error) {
    console.warn('Aktivit√°s adatok bet√∂lt√©si hiba:', error);
  }
  
  return activityData;
}

// Aktivit√°si szint meghat√°roz√°sa
function getActivityLevelForDate(dateStr, activityData) {
  const activity = activityData[dateStr] || 0;
  
  if (activity === 0) return 0;
  if (activity <= 2) return 1;
  if (activity <= 5) return 2;
  if (activity <= 8) return 3;
  return 4;
}

// Aktivit√°s le√≠r√°sa
function getActivityDescription(level) {
  const descriptions = {
    0: 'Nincs aktivit√°s',
    1: 'Alacsony aktivit√°s',
    2: 'K√∂zepes aktivit√°s', 
    3: 'Magas aktivit√°s',
    4: 'Kiemelked≈ë aktivit√°s'
  };
  return descriptions[level] || 'Ismeretlen';
}

// Aktivit√°s statisztik√°k friss√≠t√©se
function updateActivityStats(totalDays, maxStreak, avgActivity) {
  const totalElement = document.getElementById('activity-total');
  const streakElement = document.getElementById('activity-streak');
  const avgElement = document.getElementById('activity-avg');
  
  if (totalElement) totalElement.textContent = totalDays;
  if (streakElement) streakElement.textContent = maxStreak;
  if (avgElement) avgElement.textContent = avgActivity.toFixed(1);
}

// Produktivit√°si betekint√©sek friss√≠t√©se (lokaliz√°ci√≥val)
function updateProductivityInsights() {
  const insightsList = document.getElementById('insights-list');
  if (!insightsList) return;
  
  // Val√≥s statisztik√°k alapj√°n gener√°lt betekint√©sek
  const totalLists = document.querySelectorAll('.list-box').length;
  const totalItems = document.querySelectorAll('.list-box li').length;
  const completedItems = document.querySelectorAll('.list-box li.done').length;
  const completionRate = totalItems > 0 ? Math.round((completedItems / totalItems) * 100) : 0;
  
  // Glob√°lis v√°ltoz√≥k el√©r√©se (nem a lok√°lis v√°ltoz√≥k√©)
  const globalCurrentStreak = window.currentStreak || currentStreak || 0;
  const globalUserLevel = window.userLevel || userLevel || 1;
  const globalUserXP = window.userXP || userXP || 0;
  

  
  // Lokaliz√°lt sz√∂vegek a getText f√ºggv√©nnyel
  const insights = [
    { 
      icon: completionRate > 70 ? 'üìà' : completionRate > 40 ? 'üìä' : 'üìâ', 
      text: getText('overview.productivity_insights.completion', {
        rate: completionRate,
        completed: completedItems,
        total: totalItems
      })
    },
    { 
      icon: '‚≠ê', 
      text: getText('overview.productivity_insights.managing_lists', {
        count: totalLists
      })
    },
    { 
      icon: globalCurrentStreak > 0 ? 'üî•' : 'üí§', 
      text: globalCurrentStreak > 0 
        ? getText('overview.productivity_insights.streak_active', { days: globalCurrentStreak })
        : getText('overview.productivity_insights.streak_start')
    },
    { 
      icon: globalUserLevel >= 3 ? 'üèÜ' : 'üéØ', 
      text: getText('overview.productivity_insights.level_progress', {
        level: globalUserLevel,
        xp: globalUserXP
      })
    }
  ];
  
  insightsList.innerHTML = insights.map(insight => `
    <div class="insight-item">
      <span class="insight-icon">${insight.icon}</span>
      <span class="insight-text">${insight.text}</span>
    </div>
  `).join('');
}

// Esem√©ny t√≠pus ikon
function getEventTypeIcon(type) {
  const icons = {
    birthday: 'üéÇ',
    meeting: 'üíº',
    reminder: '‚è∞',
    appointment: 'üè•',
    event: 'üéâ',
    deadline: 'üìù'
  };
  return icons[type] || 'üìÖ';
}

// Kateg√≥ria ikon
function getCategoryIcon(category) {
  const icons = {
    general: 'üìù',
    passwords: 'üîí',
    ideas: '',
    important: '‚≠ê',
    work: 'üíº',
    personal: 'üë§'
  };
  return icons[category] || 'üìù';
}

// Jegyzet megnyit√°sa szerkeszt√©shez
function openNoteForEdit(noteId) {
  editNote(noteId);
}

// Id≈ët folyamatosan friss√≠tj√ºk
setInterval(updateCurrentTime, 1000);

// Alkalmaz√°s inicializ√°l√°sa
document.addEventListener('DOMContentLoaded', async () => {
  // Nyelv rendszer inicializ√°l√°sa
  await initLanguageSystem();
  
  // Navig√°ci√≥ inicializ√°l√°sa
  initNavigation();
  
  // T√©ma v√°laszt√≥ inicializ√°l√°sa
  initThemeSelector();
  
  // Profile men√º inicializ√°l√°sa
  initProfileMenu();
  
  // Dashboard kezdeti bet√∂lt√©se
  updateDashboard();
  
  // Quick actions esem√©nykezel≈ëk
  const quickActionBtns = document.querySelectorAll('.action-btn');
  quickActionBtns.forEach(btn => {
    btn.addEventListener('click', (e) => {
      const action = e.target.dataset.action;
      handleQuickAction(action);
    });
  });
  
  const eventReminderCheckbox = document.getElementById('event-reminder');
  const reminderTimeSelect = document.getElementById('reminder-time');
  
  if (eventReminderCheckbox && reminderTimeSelect) {
    eventReminderCheckbox.addEventListener('change', () => {
      reminderTimeSelect.disabled = !eventReminderCheckbox.checked;
      if (eventReminderCheckbox.checked) {
        reminderTimeSelect.style.opacity = '1';
        reminderTimeSelect.style.pointerEvents = 'auto';
      } else {
        reminderTimeSelect.style.opacity = '0.5';
        reminderTimeSelect.style.pointerEvents = 'none';
      }
    });
  }
  
  // Notification permission k√©r√©se
  requestNotificationPermission();
  
  // Audio enged√©lyez√©se user interaction ut√°n
  enableAudioOnUserInteraction();
  
  // ELT√ÅVOL√çTVA: enableAudioOnImportantElements() - ez okozta a snooze gomb hang probl√©m√°t
  console.log('‚ö†Ô∏è enableAudioOnImportantElements disabled to prevent snooze button sounds');
  
  // ‚ö†Ô∏è NO AUTOMATIC AUDIO - Wait for user interaction
  console.log('‚ö†Ô∏è No automatic audio initialization - waiting for user interaction');
  
  // NO AUTOMATIC enableAudio() call - this causes AudioContext errors!
  console.log('üéµ Audio will be enabled on first user interaction via enableAudioOnUserInteraction()');
  
  // K√∂zelg≈ë √©rtes√≠t√©sek ellen≈ërz√©se
  setTimeout(checkUpcomingNotifications, 2000); // 2 m√°sodperc k√©sleltet√©ssel
  
  // Elhalasztott √©rtes√≠t√©sek ellen≈ërz√©se
  setTimeout(checkSnoozedNotifications, 3000); // 3 m√°sodperc k√©sleltet√©ssel
  
  // Rendszeres snooze monitoring ind√≠t√°sa
  setTimeout(startSnoozeMonitoring, 5000); // 5 m√°sodperc m√∫lva ind√≠tjuk
  
  // DEBUG: Teszt √©rtes√≠t√©s 10 m√°sodperc m√∫lva (csak tesztel√©shez)
  // setTimeout(() => {
  //   showEventNotification({
  //     title: "Teszt esem√©ny",
  //     time: "12:00",
  //     description: "Ez egy teszt √©rtes√≠t√©s"
  //   });
  // }, 10000);
  
  // Teszt funkci√≥ a hangok ellen≈ërz√©s√©hez (fejleszt≈ëi konzolb√≥l h√≠vhat√≥)
  // ‚ö†Ô∏è MANU√ÅLIS AUDIO TESZTEL≈êK ELT√ÅVOL√çTVA
  console.log('üßπ Manual audio test functions removed for production');
  
  // ‚ö†Ô∏è TESZTEL≈ê FUNKCI√ìK ELT√ÅVOL√çTVA - √âLES VERZI√ì
  console.log('üßπ Test functions removed for production');
  
  // ‚ö†Ô∏è TESZT √âRTES√çT√âSEK ELT√ÅVOL√çTVA - √âLES VERZI√ì
  console.log('‚úÖ Production ready - Test notifications removed');
  console.log('üîß Audio system: User interaction safe');
  console.log('üì± PWA notifications: Mobile compatible');
  
  // PWA Debug funkci√≥k
  console.log('üîß PWA Debug Commands:');
  console.log('  showPWAButton() - Force show install button');
  console.log('  hidePWAButton() - Hide install button');
  console.log('  debugPWA() - Show PWA debug info');
  console.log('  installPWA() - Trigger install dialog');

// ===== IMMEDIATE GLOBAL PWA FUNCTIONS =====
// Ezek azonnal el√©rhet≈ëk lesznek, DOM bet√∂lt√©s n√©lk√ºl is
window.showPWAButton = function() {
  const container = document.getElementById('pwa-floating-install');
  if (container) {
    container.style.display = 'block';
    console.log('üîß IMMEDIATE: PWA button shown');
  } else {
    console.error('‚ùå PWA container not found! DOM might not be ready yet.');
    console.log('üí° Try calling this function after page load');
  }
};

window.hidePWAButton = function() {
  const container = document.getElementById('pwa-floating-install');
  if (container) {
    container.style.display = 'none';
    console.log('üîß IMMEDIATE: PWA button hidden');
  } else {
    console.error('‚ùå PWA container not found! DOM might not be ready yet.');
  }
};

window.debugPWA = function() {
  const container = document.getElementById('pwa-floating-install');
  const btn = document.getElementById('pwa-install-btn');
  console.log('üîß IMMEDIATE PWA DEBUG:');
  console.log('  - container found:', !!container);
  console.log('  - button found:', !!btn);
  console.log('  - deferredPrompt:', typeof deferredPrompt !== 'undefined' ? !!deferredPrompt : 'not defined');
  console.log('  - display mode:', window.matchMedia('(display-mode: standalone)').matches ? 'standalone' : 'browser');
  console.log('  - container display:', container ? container.style.display : 'N/A');
  console.log('  - DOM ready:', document.readyState);
};

window.installPWA = function() {
  const installBtn = document.getElementById('pwa-install-btn');
  if (installBtn) {
    installBtn.click();
    console.log('üîß IMMEDIATE: PWA install triggered');
  } else {
    console.error('‚ùå PWA install button not found! DOM might not be ready yet.');
  }
};

// Test hogy a f√ºggv√©nyek el√©rhet≈ëk-e
console.log('‚úÖ Immediate PWA functions defined');
console.log('üîß Test now: debugPWA()');
  
  // ‚ö†Ô∏è AUDIO STATUS TESZTEL≈ê ELT√ÅVOL√çTVA
  console.log('üßπ Audio status checker removed for production');
  
  // ‚ö†Ô∏è PWA √âS AUDIO TESZTEL≈êK ELT√ÅVOL√çTVA
  console.log('üßπ PWA and audio test functions removed for production');
});

// Gyors m≈±veletek kezel√©se
function handleQuickAction(action) {
  switch(action) {
    case 'quick-task':
      // Quick task modal megnyit√°sa
      openQuickTaskModal();
      break;
    case 'quick-note':
      // V√°lt√°s a jegyzetek f√ºlre √©s √∫j jegyzet
      document.querySelector('[data-tab="notes"]').click();
      setTimeout(() => {
        document.getElementById('new-note-btn').click();
      }, 100);
      break;
    case 'quick-event':
      // V√°lt√°s a napt√°r f√ºlre √©s √∫j esem√©ny
      document.querySelector('[data-tab="calendar"]').click();
      setTimeout(() => {
        document.getElementById('new-event-btn').click();
      }, 100);
      break;
  }
}

// K√∂zelg≈ë esem√©nyek bet√∂lt√©se m√°r implement√°lva fent

// Az esem√©nyek bet√∂lt√©se implement√°lva van lent

// Jegyzetek szerkeszt√©se √©s t√∂rl√©se
function deleteNote(noteId) {
  if (!auth.currentUser) return;
  
  // A jegyzet adatainak bet√∂lt√©se a modal-hoz
  const notesRef = ref(db, `users/${auth.currentUser.uid}/notes/${noteId}`);
  get(notesRef).then((snapshot) => {
    if (snapshot.exists()) {
      const noteData = snapshot.val();
      
      // Modal megjelen√≠t√©se
      const deleteModal = document.getElementById('delete-note-modal');
      const titleElement = document.getElementById('delete-note-title');
      const contentElement = document.getElementById('delete-note-content');
      
      if (deleteModal && titleElement && contentElement) {
        titleElement.textContent = noteData.title || 'C√≠m n√©lk√ºli jegyzet';
        contentElement.textContent = noteData.content ? 
          (noteData.content.length > 100 ? noteData.content.substring(0, 100) + '...' : noteData.content) : 
          'Tartalom n√©lk√ºli jegyzet';
        
        deleteModal.style.display = 'flex';
        
        // T√∂rl√©s meger≈ës√≠t√©s
        const confirmBtn = document.getElementById('confirm-delete-note');
        const cancelBtn = document.getElementById('cancel-delete-note');
        const closeBtn = document.getElementById('delete-note-modal-close');
        
        const closeModal = () => {
          deleteModal.style.display = 'none';
        };
        
        // Event listeneres cleanup
        confirmBtn.onclick = null;
        cancelBtn.onclick = null;
        closeBtn.onclick = null;
        
        confirmBtn.onclick = () => {
          // T√©nyleges t√∂rl√©s v√©grehajt√°sa
          remove(notesRef).then(() => {
            loadNotes();
            showNotification('üóëÔ∏è Jegyzet sikeresen t√∂r√∂lve!');
            closeModal();
          }).catch(error => {
            console.error('Hiba a jegyzet t√∂rl√©se sor√°n:', error);
            alert('Hiba t√∂rt√©nt a jegyzet t√∂rl√©se sor√°n.');
          });
        };
        
        cancelBtn.onclick = closeModal;
        closeBtn.onclick = closeModal;
      }
    }
  }).catch(error => {
    console.error('Hiba a jegyzet bet√∂lt√©se sor√°n:', error);
    // Fallback egyszer≈± meger≈ës√≠t√©sre
    if (confirm('Biztosan t√∂r√∂lni szeretn√©d ezt a jegyzetet?')) {
      remove(notesRef).then(() => {
        loadNotes();
        showNotification('üóëÔ∏è Jegyzet sikeresen t√∂r√∂lve!');
      }).catch(error => {
        console.error('Hiba a jegyzet t√∂rl√©se sor√°n:', error);
        alert('Hiba t√∂rt√©nt a jegyzet t√∂rl√©se sor√°n.');
      });
    }
  });
}

// ==============================================
// üìÖ NAPT√ÅR ESEM√âNYEK TELJES IMPLEMENT√ÅL√ÅSA
// ==============================================

// Esem√©ny ment√©s implement√°l√°sa
function saveEvent() {
  const title = document.getElementById('event-title').value.trim();
  const date = document.getElementById('event-date').value;
  const time = document.getElementById('event-time').value;
  const description = document.getElementById('event-description').value.trim();
  const type = document.getElementById('event-type').value;
  const reminder = document.getElementById('event-reminder').checked;
  const reminderTime = document.getElementById('reminder-time').value;
  
  if (!title || !date) {
    alert('K√©rj√ºk, t√∂ltsd ki legal√°bb a c√≠met √©s a d√°tumot!');
    return;
  }
  
  if (!auth.currentUser) {
    alert('Be kell jelentkezned az esem√©ny ment√©s√©hez!');
    return;
  }
  
  const eventsRef = ref(db, `users/${auth.currentUser.uid}/events`);
  const eventData = {
    title,
    date,
    time: time || null,
    description,
    type,
    reminder,
    reminderTime: reminder ? parseInt(reminderTime) : null,
    timestamp: Date.now(),
    createdAt: new Date().toISOString()
  };
  
  push(eventsRef, eventData).then(() => {
    closeEventModal();
    loadEvents();
    renderCalendar();
    addXP(3); // XP esem√©ny hozz√°ad√°s√©rt
    showNotification('üìÖ Esem√©ny sikeresen mentve!');
    
    // Eml√©keztet≈ë be√°ll√≠t√°sa ha sz√ºks√©ges
    if (reminder) {
      scheduleNotification(eventData);
    }
  }).catch(error => {
    console.error('Hiba az esem√©ny ment√©se sor√°n:', error);
    alert('Hiba t√∂rt√©nt az esem√©ny ment√©se sor√°n.');
  });
}

// Esem√©nyek bet√∂lt√©se a napt√°rhoz
function loadEvents() {
  if (!auth.currentUser) return;
  
  const eventsRef = ref(db, `users/${auth.currentUser.uid}/events`);
  
  onValue(eventsRef, (snapshot) => {
    const calendarEvents = {};
    
    if (snapshot.exists()) {
      Object.entries(snapshot.val()).forEach(([id, data]) => {
        const eventDate = data.date;
        if (!calendarEvents[eventDate]) {
          calendarEvents[eventDate] = [];
        }
        calendarEvents[eventDate].push({ id, ...data });
      });
    }
    
    // Napt√°r napok friss√≠t√©se esem√©nyekkel
    updateCalendarWithEvents(calendarEvents);
    
    // Dashboard √©s k√∂zelg≈ë esem√©nyek friss√≠t√©se
    updateTodayEvents();
    loadUpcomingEvents();
  });
}

// Napt√°r napok friss√≠t√©se esem√©nyekkel
function updateCalendarWithEvents(events) {
  const calendarDays = document.querySelectorAll('.calendar-day');
  
  calendarDays.forEach(dayElement => {
    const dayNumber = parseInt(dayElement.textContent);
    const currentMonth = currentDate.getMonth();
    const currentYear = currentDate.getFullYear();
    
    // Skip header days
    if (isNaN(dayNumber)) return;
    
    const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(dayNumber).padStart(2, '0')}`;
    
    // Esem√©ny jelz√©s elt√°vol√≠t√°sa
    dayElement.classList.remove('has-event');
    
    // Esem√©ny jelz√©s hozz√°ad√°sa ha van esem√©ny
    if (events[dateStr] && events[dateStr].length > 0) {
      dayElement.classList.add('has-event');
      dayElement.title = `${events[dateStr].length} esem√©ny`;
    }
  });
}

// Mai esem√©nyek friss√≠t√©se Firebase-b≈ël
function updateTodayEvents() {
  if (!auth.currentUser) return;
  
  const todayEventsList = document.getElementById('today-events-list');
  if (!todayEventsList) return;
  
  const today = new Date();
  const todayStr = formatDateToString(today);
  
  const eventsRef = ref(db, `users/${auth.currentUser.uid}/events`);
  
  onValue(eventsRef, (snapshot) => {
    if (snapshot.exists()) {
      const todayEvents = Object.entries(snapshot.val())
        .map(([id, data]) => ({ id, ...data }))
        .filter(event => event.date === todayStr)
        .sort((a, b) => (a.time || '00:00').localeCompare(b.time || '00:00'));
      
      if (todayEvents.length === 0) {
        todayEventsList.innerHTML = `<p class="no-events" data-i18n="dashboard.no_events">${getText('dashboard.no_events')}</p>`;
      } else {
        todayEventsList.innerHTML = todayEvents.map(event => `
          <div class="event-preview">
            <div class="event-time">${event.time || getText('calendar.all_day')}</div>
            <div class="event-title">${event.title}</div>
            <div class="event-type">${getEventTypeIcon(event.type)}</div>
          </div>
        `).join('');
      }
    } else {
      todayEventsList.innerHTML = `<p class="no-events" data-i18n="dashboard.no_events">${getText('dashboard.no_events')}</p>`;
    }
  });
}

// K√∂zelg≈ë esem√©nyek bet√∂lt√©se Firebase-b≈ël
function loadUpcomingEvents() {
  if (!auth.currentUser) return;
  
  const upcomingEventsList = document.getElementById('upcoming-events-list');
  if (!upcomingEventsList) return;
  
  const today = new Date();
  const nextWeek = new Date();
  nextWeek.setDate(today.getDate() + 7);
  
  const todayStr = formatDateToString(today);
  const nextWeekStr = formatDateToString(nextWeek);
  
  const eventsRef = ref(db, `users/${auth.currentUser.uid}/events`);
  
  onValue(eventsRef, (snapshot) => {
    if (snapshot.exists()) {
      const upcomingEvents = Object.entries(snapshot.val())
        .map(([id, data]) => ({ id, ...data }))
        .filter(event => event.date >= todayStr && event.date <= nextWeekStr)
        .sort((a, b) => {
          const dateCompare = a.date.localeCompare(b.date);
          if (dateCompare === 0) {
            return (a.time || '00:00').localeCompare(b.time || '00:00');
          }
          return dateCompare;
        });
      
      if (upcomingEvents.length === 0) {
        upcomingEventsList.innerHTML = `<p class="no-events" data-i18n="dashboard.no_upcoming_events">${getText('dashboard.no_upcoming_events')}</p>`;
      } else {
        upcomingEventsList.innerHTML = upcomingEvents.map(event => `
          <div class="upcoming-event">
            <div class="event-date">${new Date(event.date).toLocaleDateString(currentLanguage === 'hu' ? 'hu-HU' : currentLanguage === 'de' ? 'de-DE' : 'en-US')}</div>
            <div class="event-title">${event.title}</div>
            <div class="event-type">${getEventTypeIcon(event.type)}</div>
            <button class="delete-event-btn" onclick="deleteEvent('${event.id}')" title="${getText('common.delete')}">
              <span class="material-icons">delete</span>
            </button>
          </div>
        `).join('');
      }
    } else {
      upcomingEventsList.innerHTML = `<p class="no-events" data-i18n="dashboard.no_upcoming_events">${getText('dashboard.no_upcoming_events')}</p>`;
    }
  });
}

// Eml√©keztet≈ë √ºtemez√©se
function scheduleNotification(eventData) {
  const eventDateTime = new Date(`${eventData.date}T${eventData.time || '00:00'}`);
  const reminderTime = eventData.reminderTime || 0;
  const notificationTime = new Date(eventDateTime.getTime() - (reminderTime * 60000));
  
  const now = new Date();
  const timeUntilNotification = notificationTime.getTime() - now.getTime();
  
  if (timeUntilNotification > 0) {
    setTimeout(() => {
      showEventNotification(eventData);
    }, timeUntilNotification);
    console.log(`Eml√©keztet≈ë be√°ll√≠tva ${eventData.title} esem√©nyhez: ${new Date(notificationTime).toLocaleString()}`);
  }
}

// Az oldal bet√∂lt√©sekor minden j√∂v≈ëbeli esem√©nyre √∫jra√ºtemez√ºnk
function checkUpcomingNotifications() {
  if (!auth.currentUser) return;

  const eventsRef = ref(db, `users/${auth.currentUser.uid}/events`);
  get(eventsRef).then((snapshot) => {
    if (snapshot.exists()) {
      const events = Object.entries(snapshot.val()).map(([id, data]) => ({ id, ...data }));
      const now = new Date();
      events.forEach(event => {
        if (event.reminder && event.reminderTime) {
          const eventDateTime = new Date(`${event.date}T${event.time || '00:00'}`);
          const reminderTime = event.reminderTime || 0;
          const notificationTime = new Date(eventDateTime.getTime() - (reminderTime * 60000));
          if (notificationTime > now) {
            scheduleNotification(event);
          }
        }
      });
    }
  });
}

// √ârtes√≠t√©sek ellen≈ërz√©se minden 1 percben a pontosabb id≈ëz√≠t√©s √©rdek√©ben
setInterval(() => {
  checkUpcomingNotifications();
  checkSnoozedNotifications();
}, 60 * 1000);

// Esem√©ny √©rtes√≠t√©s megjelen√≠t√©se - PWA √©s mobil kompatibilis
function showEventNotification(eventData) {
  console.log('üîî ========== SHOWING EVENT NOTIFICATION ==========');
  console.log('üìÖ Event:', eventData.title);
  console.log('‚è∞ Time:', eventData.time);
  
  // MOBIL PWA NOTIFICATION - PRIORIT√ÅS!
  if ('serviceWorker' in navigator && Notification.permission === 'granted') {
    const notificationOptions = {
      body: `${eventData.time || getText('calendar.all_day')} - ${eventData.description || ''}`,
      icon: '/android-chrome-192x192.png',
      badge: '/favicon-32x32.png',
      vibrate: [200, 100, 200], // Vibr√°ci√≥ mobil eszk√∂z√∂k√∂n
      requireInteraction: true, // Nem t≈±nik el automatikusan
      persistent: true, // Perzisztens √©rtes√≠t√©s
      actions: [
        {
          action: 'snooze',
          title: '‚è∞ 1 perc m√∫lva',
          icon: '/favicon-16x16.png'
        },
        {
          action: 'dismiss',
          title: '‚úÖ Rendben',
          icon: '/favicon-16x16.png'
        }
      ],
      tag: `event-${eventData.id || Date.now()}`, // Egyedi tag
      renotify: true, // √öjra √©rtes√≠t√©s ha m√°r van ilyen tag
      silent: false // NE legyen silent - kell a hang
    };
    
    console.log('üì± Creating PWA notification for mobile...');
    
    // Service Worker notification (mobil kompatibilis)
    if (navigator.serviceWorker.controller) {
      navigator.serviceWorker.ready.then(registration => {
        registration.showNotification(
          `üìÖ ${getText('notifications.upcoming_event')}: ${eventData.title}`,
          notificationOptions
        ).then(() => {
          console.log('‚úÖ PWA notification created successfully');
        }).catch(err => {
          console.log('‚ùå PWA notification failed:', err);
          // Fallback to regular notification
          createRegularNotification(eventData);
        });
      });
    } else {
      // Fallback to regular notification
      createRegularNotification(eventData);
    }
  } else {
    // No permission or no service worker
    console.log('‚ö†Ô∏è No PWA notification support, using regular methods');
    createRegularNotification(eventData);
  }
  
  // Alkalmaz√°son bel√ºli √©rtes√≠t√©si modal megjelen√≠t√©se
  showEventNotificationModal(eventData);
  
  // HANG LEJ√ÅTSZ√ÅSA - LOOP RENDSZERREL
  console.log('üîä Starting notification sound...');
  playNotificationSound();
  
  // Hagyom√°nyos √©rtes√≠t√©s is (fallback)
  showNotification(`üìÖ ${getText('notifications.upcoming_event')}: ${eventData.title} - ${eventData.time || getText('calendar.all_day')}`);
  
  console.log('‚úÖ Event notification fully displayed');
}

// Regular browser notification fallback
function createRegularNotification(eventData) {
  if (Notification.permission === 'granted') {
    const notification = new Notification(`üìÖ ${getText('notifications.upcoming_event')}: ${eventData.title}`, {
      body: `${eventData.time || getText('calendar.all_day')} - ${eventData.description || ''}`,
      icon: '/android-chrome-192x192.png',
      requireInteraction: true,
      silent: false
    });
    
    // Handle notification clicks
    notification.onclick = () => {
      window.focus();
      notification.close();
    };
    
    console.log('‚úÖ Regular browser notification created');
  }
}

// Notification permission k√©r√©se
function requestNotificationPermission() {
  if ('Notification' in window && Notification.permission === 'default') {
    Notification.requestPermission();
  }
}

// Event Notification Modal megjelen√≠t√©se
function showEventNotificationModal(eventData) {
  const modal = document.getElementById('event-notification-modal');
  const title = document.getElementById('event-notification-event-title');
  const time = document.getElementById('event-notification-time-text');
  const description = document.getElementById('event-notification-description-text');
  const modalTitle = document.getElementById('event-notification-title');
  
  // Nyelvi sz√∂vegek be√°ll√≠t√°sa
  if (modalTitle) modalTitle.textContent = `üîî ${getText('notifications.event_reminder')}`;
  
  // Esem√©ny adatok kit√∂lt√©se
  if (title) title.textContent = eventData.title;
  if (time) time.textContent = eventData.time || getText('calendar.all_day');
  if (description) description.textContent = eventData.description || '';
  
  // Modal megjelen√≠t√©se
  if (modal) {
    modal.style.display = 'flex';
    
    // NINCS K√úL√ñN AUDIO AKTIV√ÅL√ÅS - a playNotificationSound() m√°r elindult
    
    // Event listeners be√°ll√≠t√°sa
    setupEventNotificationListeners(eventData);
  }
}

// Event notification modal event listeners
function setupEventNotificationListeners(eventData) {
  const modal = document.getElementById('event-notification-modal');
  const closeBtn = document.getElementById('event-notification-close');
  const snoozeBtn = document.getElementById('event-notification-snooze');
  const dismissBtn = document.getElementById('event-notification-dismiss');
  
  // Bez√°r√°s gomb
  if (closeBtn) {
    closeBtn.onclick = () => closeEventNotificationModal();
  }
  
  // Elhalaszt√°s gomb
  if (snoozeBtn) {
    snoozeBtn.textContent = `‚è∞ 1 perc m√∫lva`;
    snoozeBtn.onclick = () => {
      // HANG LE√ÅLL√çT√ÅSA AZONNAL - SEMMILYEN HANG VAGY AUDIO AKTIV√ÅL√ÅS NINCS!
      console.log('üîá Snooze button clicked - COMPLETELY SILENT operation');
      
      // Hang le√°ll√≠t√°sa EL≈êSZ√ñR - ez a legfontos!
      stopNotificationSound();
      
      // ‚ö†Ô∏è NO AUDIO FLAG MODIFICATION! Ez okozta a probl√©m√°kat!
      console.log('‚úÖ Snooze: Sound stopped, no audio flags modified');
      
      // Snooze v√©grehajt√°sa (ez m√°r tartalmazza a modal bez√°r√°s√°t)
      snoozeEventNotification(eventData);
    };
  }
  
  // Rendben gomb
  if (dismissBtn) {
    dismissBtn.textContent = `‚úÖ ${getText('notifications.dismiss')}`;
    dismissBtn.onclick = () => closeEventNotificationModal();
  }
  
  // Modal h√°tt√©rre kattint√°s
  modal.onclick = (e) => {
    if (e.target === modal) {
      console.log('üñ±Ô∏è Background clicked - closing modal and stopping sound');
      stopNotificationSound(); // Biztos√≠t√©k
      closeEventNotificationModal();
    }
  };
  
  // ESC billenty≈±
  document.addEventListener('keydown', function escHandler(e) {
    if (e.key === 'Escape') {
      console.log('‚å®Ô∏è ESC pressed - closing modal and stopping sound');
      stopNotificationSound(); // Biztos√≠t√©k
      closeEventNotificationModal();
      document.removeEventListener('keydown', escHandler);
    }
  });
}

// Event notification modal bez√°r√°sa
function closeEventNotificationModal() {
  console.log('üö™ ========== CLOSING EVENT NOTIFICATION MODAL ==========');
  
  // CRITICAL: STOP AUDIO LOOP IMMEDIATELY TO PREVENT SOUNDS ON CLOSE
  console.log('üîá STOPPING ALL AUDIO to prevent sounds on modal close');
  stopNotificationSound();
  
  const modal = document.getElementById('event-notification-modal');
  if (modal) {
    modal.style.display = 'none';
    console.log('‚úÖ Modal hidden');
  }
  
  // EXTRA SAFETY: Set a short delay to ensure no audio triggers
  setTimeout(() => {
    if (notificationInterval) {
      clearInterval(notificationInterval);
      notificationInterval = null;
      console.log('üõë SAFETY: Extra interval clearance');
    }
  }, 100);
  
  console.log('‚úÖ Event notification modal closed completely - NO SOUNDS');
}

// Audio context a hang enged√©lyez√©s√©hez
let audioContext = null;
let audioEnabled = false;
let audioFullyActivated = false; // Track if user has interacted and audio is fully ready
let notificationInterval = null;
let isNotificationPlaying = false;

// Audio enged√©lyez√©se user interaction ut√°n
function enableAudio() {
  if (!audioEnabled && !audioContext) {
    try {
      audioContext = new (window.AudioContext || window.webkitAudioContext)();
      audioEnabled = true;
      console.log('Audio enabled successfully');
      
      // Resume context ha suspended
      if (audioContext.state === 'suspended') {
        audioContext.resume();
      }
      
      // NINCS TESZT HANG - csak az audio context l√©trehoz√°sa!
      console.log('‚úÖ Audio context ready (no test sound)');
    } catch (error) {
      console.log('Audio context creation failed:', error);
    }
  }
}

// Audio el≈ëk√©sz√≠t√©se √©rtes√≠t√©sekhez
function prepareAudioForNotifications() {
  console.log('üéµ ========== AUDIO PREPARATION (NO AUTO-PLAY) ==========');
  try {
    // HTML audio CSAK el≈ëk√©sz√≠t√©se - NINCS AUTOMATIKUS LEJ√ÅTSZ√ÅS!
    const audio = document.getElementById('notification-sound');
    if (audio) {
      audio.volume = 0.9; // Be√°ll√≠tjuk a megfelel≈ë hanger≈ët
      audio.currentTime = 0;
      // ‚ö†Ô∏è NO AUTO-PLAY - ez okozta az AudioContext hib√°kat!
      console.log('‚úÖ HTML Audio configured (no auto-play)');
    }
    
    // Web Audio API - CSAK CONTEXT ELLEN≈êRZ√âS, NINCS OSCILLATOR TESZT!
    if (audioContext) {
      console.log('‚úÖ Web Audio Context is available');
      console.log('  - State:', audioContext.state);
      console.log('  - Sample rate:', audioContext.sampleRate);
      // ‚ö†Ô∏è NO OSCILLATOR TEST - ez okozta az AudioContext hib√°kat!
      console.log('‚úÖ Web Audio API prepared (no test oscillator)');
    } else {
      console.log('‚ö†Ô∏è No audio context available yet');
    }
    
    console.log('‚úÖ Audio preparation complete (silent mode - no auto-play)');
  } catch (error) {
    console.log('‚ùå Audio preparation failed:', error);
  }
}

// Audio enged√©lyez√©se az els≈ë user interaction-n√°l
function enableAudioOnUserInteraction() {
  const events = ['click', 'touchstart', 'keydown'];
  
  function audioHandler() {
    console.log('üéµ First user interaction detected - enabling audio context');
    enableAudio();
    audioFullyActivated = true;
    
    // Event listener-ek elt√°vol√≠t√°sa az els≈ë interaction ut√°n
    events.forEach(event => {
      document.removeEventListener(event, audioHandler);
    });
    
    console.log('‚úÖ Audio fully activated on user interaction');
  }
  
  // Event listener-ek hozz√°ad√°sa
  events.forEach(event => {
    document.addEventListener(event, audioHandler, { once: true });
  });
}

// ‚ö†Ô∏è DISABLED - Ez okozta a snooze gomb hang probl√©m√°t
function enableAudioOnImportantElements() {
  console.log('‚ö†Ô∏è enableAudioOnImportantElements is DISABLED to prevent unwanted sounds');
  // Az √∂sszes functionality ki van kapcsolva
  return;
}

// üîä EGYSZER≈∞ NOTIFICATION HANG RENDSZER
function playNotificationSound() {
  console.log('üîä ========== STARTING NOTIFICATION SOUND (SIMPLE LOOP) ==========');
  
  // AUDIO ACTIVATION CHECK - CRITICAL SAFETY!
  if (!audioFullyActivated) {
    console.log('‚ö†Ô∏è Audio not activated yet! Need user interaction first.');
    console.log('üí° Audio will be enabled on first click/touch/key press');
    return;
  }
  
  // Ha m√°r sz√≥l egy √©rtes√≠t√©s, √°ll√≠tsuk le el≈ëbb
  if (isNotificationPlaying) {
    console.log('‚ö†Ô∏è Notification already playing - stopping previous first');
    stopNotificationSound();
  }
  
  // BIZTOS√çTSUK, HOGY AZ AUDIO CONTEXT L√âTEZIK √âS AKT√çV
  if (!audioContext) {
    console.log('‚ùå No audio context available - this should not happen after user interaction');
    console.log('üîß Attempting audio context creation...');
    enableAudio();
    
    // If still no context, abort
    if (!audioContext) {
      console.log('‚ùå Failed to create audio context - aborting sound');
      return;
    }
  }
  
  // AUDIO CONTEXT STATE CHECK
  if (audioContext.state === 'suspended') {
    console.log('‚ö†Ô∏è Audio context is suspended - trying to resume...');
    audioContext.resume().then(() => {
      console.log('‚úÖ Audio context resumed - starting simple sound');
      startSimpleLoop();
    }).catch(err => {
      console.log('‚ùå Failed to resume audio context:', err);
    });
  } else {
    startSimpleLoop();
  }
  
  function startSimpleLoop() {
    console.log('üîä Starting simple notification loop...');
    
    // √ÅLL√çTSUK BE A FLAG-ET
    isNotificationPlaying = true;
    console.log('‚úÖ isNotificationPlaying = TRUE');
    
    // ELS≈ê HANG AZONNAL
    playSingleBeep();
    
    // LOOP IND√çT√ÅSA
    startContinuousLoop();
  }
}

// ‚ö†Ô∏è DEPRECATED FUNCTION - REPLACED BY SIMPLE LOOP IN playNotificationSound()
function startWorkingAudioLoop() {
  console.log('‚ö†Ô∏è startWorkingAudioLoop is deprecated - redirecting to startContinuousLoop');
  startContinuousLoop();
}

// üîÑ FOLYAMATOS LOOP - 3 M√ÅSODPERCENK√âNT
function startContinuousLoop() {
  console.log('üîÑ ========== STARTING CONTINUOUS LOOP ==========');
  
  // ELLEN≈êRIZZ√úK, hogy nincs-e m√°r fut√≥ interval
  if (notificationInterval) {
    console.log('‚ö†Ô∏è Clearing existing interval first');
    clearInterval(notificationInterval);
    notificationInterval = null;
  }
  
  // Loop: minden 3 m√°sodpercben ism√©tl√©s
  notificationInterval = setInterval(() => {
    console.log('üîÑ Loop tick - isNotificationPlaying:', isNotificationPlaying);
    if (isNotificationPlaying) {
      console.log('üîä Playing loop beep...');
      playSingleBeep();
    } else {
      console.log('üõë Loop stopped - clearing interval');
      clearInterval(notificationInterval);
      notificationInterval = null;
    }
  }, 3000); // 3 m√°sodpercenk√©nt
  
  console.log('‚úÖ Continuous loop started - playing every 3 seconds');
  console.log('üìä isNotificationPlaying flag:', isNotificationPlaying);
}

// üîä EGYSZER≈∞ BEEP HANG - TISZTA √âS EGYED√úL√ÅLL√ì
function playSingleBeep() {
  if (!audioContext) return;
  
  try {
    console.log('üîä SINGLE BEEP! (880Hz)');
    
    // Egyszer≈± oscillator
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    // Be√°ll√≠t√°sok
    oscillator.frequency.setValueAtTime(880, audioContext.currentTime); // A note
    oscillator.type = 'sine';
    
    // Hanger≈ë be√°ll√≠t√°sa - kicsit hangosabb
    gainNode.gain.setValueAtTime(0, audioContext.currentTime);
    gainNode.gain.linearRampToValueAtTime(0.4, audioContext.currentTime + 0.1); // 0.3 ‚Üí 0.4
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.6); // 0.5 ‚Üí 0.6 (hosszabb)
    
    // Lej√°tsz√°s - kicsit hosszabb hang
    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + 0.6);
    
  } catch (error) {
    console.log('‚ùå Single beep failed:', error);
  }
}

// ‚ö†Ô∏è CLEANED UP - Deprecated functions removed to simplify audio system
// All audio functionality now goes through:
// - playNotificationSound() -> startContinuousLoop() -> playSingleBeep()
console.log('‚úÖ Deprecated audio functions cleaned up for simpler system');

// üõë EGYSZER≈∞ HANG LE√ÅLL√çT√ÅS
function stopNotificationSound() {
  console.log('üõë ========== STOPPING NOTIFICATION SOUND ==========');
  
  // ELS≈ê L√âP√âS: isNotificationPlaying = false (ez meg√°ll√≠tja a loop-okat)
  isNotificationPlaying = false;
  console.log('‚úÖ isNotificationPlaying = FALSE');
  
  // Folyamatos lej√°tsz√°s le√°ll√≠t√°sa (Web Audio interval)
  if (notificationInterval) {
    clearInterval(notificationInterval);
    notificationInterval = null;
    console.log('‚úÖ Notification interval cleared');
  } else {
    console.log('‚ÑπÔ∏è No notification interval to clear');
  }
  
  console.log('‚úÖ All notification sounds stopped completely');
}

// 5 perces elhalaszt√°s (tesztel√©shez 1 perc)
function snoozeEventNotification(eventData) {
  // ELS≈ê: HANGOT LE√ÅLL√çTJUK!
  stopNotificationSound();
  
  const snoozeTime = new Date(Date.now() + 1 * 60 * 1000); // 1 perc m√∫lva (tesztel√©shez)
  
  // Perzisztens t√°rol√°s localStorage-ban
  const snoozeData = {
    eventData: eventData,
    snoozeTime: snoozeTime.getTime(),
    id: `snooze_${Date.now()}_${Math.random()}`
  };
  
  // Ment√©s localStorage-ba
  let snoozedEvents = JSON.parse(localStorage.getItem('snoozedEvents') || '[]');
  snoozedEvents.push(snoozeData);
  localStorage.setItem('snoozedEvents', JSON.stringify(snoozedEvents));
  
  console.log(`Event notification snoozed for 1 minute: ${eventData.title} until ${snoozeTime.toLocaleString()}`);
  showNotification(`‚è∞ ${eventData.title} - 1 perc m√∫lva √∫jra eml√©keztet√©s`);
  
  // Modal bez√°r√°sa
  closeEventNotificationModal();
  
  // Azonnali check ind√≠t√°sa
  checkSnoozedNotifications();
}

// Elhalasztott √©rtes√≠t√©sek ellen≈ërz√©se
function checkSnoozedNotifications() {
  const now = Date.now();
  let snoozedEvents = JSON.parse(localStorage.getItem('snoozedEvents') || '[]');
  let activeSnoozedEvents = [];
  
  snoozedEvents.forEach(snoozeData => {
    if (now >= snoozeData.snoozeTime) {
      // Lej√°rt - megjelen√≠tj√ºk az √©rtes√≠t√©st
      console.log(`Showing snoozed notification: ${snoozeData.eventData.title}`);
      showEventNotification(snoozeData.eventData);
    } else {
      // M√©g nem j√°rt le - megtartjuk
      activeSnoozedEvents.push(snoozeData);
    }
  });
  
  // Friss√≠tj√ºk a localStorage-t
  localStorage.setItem('snoozedEvents', JSON.stringify(activeSnoozedEvents));
}

// Elhalasztott √©rtes√≠t√©sek t√∂rl√©se (ha bez√°rjuk az √©rtes√≠t√©st v√©glegesen)
function clearSnoozedNotifications() {
  // Hang le√°ll√≠t√°sa ha sz√ºks√©ges
  stopNotificationSound();
  
  localStorage.removeItem('snoozedEvents');
  console.log('All snoozed notifications cleared');
}

// ===============================================
// üîß TESTING FUNCTIONS (Console accessible)
// ===============================================

// Tesztel√©shez - hang le√°ll√≠t√°sa
window.stopTestSound = function() {
  stopNotificationSound();
  console.log('üîá Test sound stopped manually');
};

// Tesztel√©shez - val√≥di loop hang tesztel√©se
window.testContinuousSound = function() {
  console.log('üîä ========== TESTING CONTINUOUS SOUND (SAFE MODE) ==========');
  
  // SAFETY CHECK FIRST
  if (!audioFullyActivated) {
    console.log('‚ö†Ô∏è Audio not yet activated! Please click somewhere on the page first.');
    return;
  }
  
  console.log('üìã Audio status: ready');
  
  // RESET minden audio flag
  isNotificationPlaying = false;
  if (notificationInterval) {
    clearInterval(notificationInterval);
    notificationInterval = null;
  }
  
  console.log('üîß Audio system reset complete');
  console.log('üîä Starting SIMPLE LOOP system...');
  
  // EGYSZER≈∞ HANG LEJ√ÅTSZ√ÅSA - nem dupla
  playNotificationSound();
  
  console.log('‚ñ∂Ô∏è Simple loop sound started. Use stopTestSound() to stop.');
  console.log('üìã Expected behavior: Sound plays every 3 seconds');
};

// √öj teszt funkci√≥ - teljes rendszer ellen≈ërz√©se
window.testNotificationSystem = function() {
  console.log('üß™ ========== TESTING COMPLETE NOTIFICATION SYSTEM (SAFE MODE) ==========');
  console.log('üìä Current audio status:');
  console.log('  - audioContext:', !!audioContext);
  console.log('  - audioEnabled:', audioEnabled);
  console.log('  - audioFullyActivated:', audioFullyActivated);
  console.log('  - isNotificationPlaying:', isNotificationPlaying);
  
  // SAFETY CHECK - NO AUTOMATIC AUDIO ACTIVATION!
  if (!audioFullyActivated) {
    console.log('‚ö†Ô∏è Audio not yet activated by user interaction!');
    console.log('üí° Please click/touch/type somewhere on the page first.');
    console.log('üîß After user interaction, try this test again.');
    console.log('üìã This prevents AudioContext browser errors.');
    return;
  }
  
  // Test event l√©trehoz√°sa
  const testEvent = {
    title: 'üîä Teszt √ârtes√≠t√©s - SAFE MODE',
    description: 'Ellen≈ërizd: hang loop m≈±k√∂dik + modal bez√°r√°skor le√°ll',
    time: new Date().toLocaleTimeString()
  };
  
  console.log('‚úÖ Audio is ready - testing notification...');
  
  // √ârtes√≠t√©s megjelen√≠t√©se
  console.log('üì± Showing test notification...');
  showEventNotification(testEvent);
  
  console.log('‚úÖ Test notification shown (user interaction safe). Check that:');
  console.log('   1. Modal appears');
  console.log('   2. Sound plays every 3 seconds (loop)');
  console.log('   3. Sound stops when modal is closed');
  console.log('==================================================');
};

// ===============================================
// üåê INTERNATIONALIZATION (i18n) SYSTEM
// ===============================================

let currentLanguage = 'hu';
let translations = {};

// Nyelv inicializ√°l√°sa
async function initLanguageSystem() {
  // Mentett nyelv bet√∂lt√©se
  const savedLanguage = localStorage.getItem('language') || 'hu';
  await loadLanguage(savedLanguage);
  
  // Nyelv dropdown inicializ√°l√°sa
  initLanguageDropdown();
}

// Nyelvi f√°jl bet√∂lt√©se
async function loadLanguage(languageCode) {
  try {
    const response = await fetch(`languages/${languageCode}.json`);
    if (response.ok) {
      translations = await response.json();
      currentLanguage = languageCode;
      localStorage.setItem('language', languageCode);
      
      // UI friss√≠t√©se
      updateUITexts();
    } else {
      console.error(`Language file ${languageCode}.json not found, falling back to Hungarian`);
      if (languageCode !== 'hu') {
        await loadLanguage('hu');
      }
    }
  } catch (error) {
    console.error('Error loading language:', error);
    if (languageCode !== 'hu') {
      await loadLanguage('hu');
    }
  }
}

// Sz√∂veg lek√©r√©se
function getText(key, placeholders = {}) {
  const keys = key.split('.');
  let value = translations;
  
  for (const k of keys) {
    if (value && typeof value === 'object' && k in value) {
      value = value[k];
    } else {
      console.warn(`Translation key not found: ${key}`);
      return key;
    }
  }
  
  // Placeholder-ek helyettes√≠t√©se
  if (typeof value === 'string') {
    return value.replace(/\{(\w+)\}/g, (match, placeholder) => {
      return placeholders[placeholder] !== undefined ? placeholders[placeholder] : match;
    });
  }
  
  return value;
}

// Seg√©df√ºggv√©ny a gomb sz√∂veg friss√≠t√©s√©hez (text node alap√∫)
function updateButtonText(button, text) {
  if (!button) return;
  
  const textNodes = Array.from(button.childNodes).filter(node => node.nodeType === Node.TEXT_NODE);
  if (textNodes.length > 0) {
    textNodes[textNodes.length - 1].textContent = text;
  }
}

// UI sz√∂vegek friss√≠t√©se
function updateUITexts() {
  // Navig√°ci√≥
  const dashboardTab = document.querySelector('[data-tab="dashboard"]');
  const overviewTab = document.querySelector('[data-tab="overview"]');
  const listsTab = document.querySelector('[data-tab="lists"]');
  const notesTab = document.querySelector('[data-tab="notes"]');
  const calendarTab = document.querySelector('[data-tab="calendar"]');
  
  if (dashboardTab) dashboardTab.innerHTML = getText('navigation.dashboard');
  if (overviewTab) overviewTab.innerHTML = getText('navigation.overview');
  if (listsTab) listsTab.innerHTML = getText('navigation.lists');
  if (notesTab) notesTab.innerHTML = getText('navigation.notes');
  if (calendarTab) calendarTab.innerHTML = getText('navigation.calendar');
  
  // Auth szekci√≥ sz√∂vegek
  const authTitle = document.querySelector('#auth-section h1');
  const emailInput = document.getElementById('email-input');
  const authPasswordInput = document.getElementById('auth-password-input');
  const loginBtn = document.getElementById('login-btn');
  const registerBtn = document.getElementById('register-btn');
  const logoutBtn = document.getElementById('logout-btn');
  
  if (authTitle) authTitle.textContent = getText('auth.title');
  if (emailInput) emailInput.placeholder = getText('auth.email_placeholder');
  if (authPasswordInput) authPasswordInput.placeholder = getText('auth.password_placeholder');
  if (loginBtn) loginBtn.textContent = getText('auth.login');
  if (registerBtn) registerBtn.textContent = getText('auth.register');
  if (logoutBtn) logoutBtn.textContent = getText('auth.logout');
  
  // Dashboard sz√∂vegek
  const welcomeTitle = document.querySelector('.welcome-card h2');
  const welcomeText = document.querySelector('.welcome-card p');
  const streakLabel = document.querySelector('.streak-label');
  
  if (welcomeTitle) welcomeTitle.textContent = getText('dashboard.welcome');
  if (welcomeText) welcomeText.textContent = getText('dashboard.overview_text');
  if (streakLabel) streakLabel.textContent = getText('dashboard.streak_label');
  
  // Quick actions
  const quickActionsTitle = document.querySelector('.quick-actions h3');
  if (quickActionsTitle) quickActionsTitle.textContent = getText('dashboard.quick_actions');
  
  const quickTaskBtn = document.querySelector('[data-action="quick-task"]');
  const quickNoteBtn = document.querySelector('[data-action="quick-note"]');
  const quickEventBtn = document.querySelector('[data-action="quick-event"]');
  
  if (quickTaskBtn) quickTaskBtn.textContent = getText('dashboard.quick_task');
  if (quickNoteBtn) quickNoteBtn.textContent = getText('dashboard.quick_note');
  if (quickEventBtn) quickEventBtn.textContent = getText('dashboard.quick_event');
  
  // Dashboard tov√°bbi sz√∂vegek
  const dailyInspirationTitle = document.querySelector('.daily-quote h3');
  const todayEventsTitle = document.querySelector('.today-events h3');
  const pinnedItemsTitle = document.querySelector('.pinned-items h3');
  const urgentTasksTitle = document.querySelector('.urgent-tasks h3');
  const noEventsText = document.querySelector('.no-events');
  const noUrgentText = document.querySelector('.no-urgent');
  
  if (dailyInspirationTitle) dailyInspirationTitle.textContent = getText('dashboard.daily_inspiration');
  if (todayEventsTitle) todayEventsTitle.textContent = getText('dashboard.today_events');
  if (pinnedItemsTitle) pinnedItemsTitle.textContent = getText('dashboard.pinned_items');
  if (urgentTasksTitle) urgentTasksTitle.textContent = getText('dashboard.urgent_tasks');
  if (noEventsText) noEventsText.textContent = getText('dashboard.no_events');
  if (noUrgentText) noUrgentText.textContent = getText('dashboard.no_urgent');
  
  // Pinned items szekci√≥ban
  const pinnedNotesTitle = document.querySelector('#pinned-notes h4');
  const pinnedTasksTitle = document.querySelector('#pinned-tasks h4');
  
  if (pinnedNotesTitle) pinnedNotesTitle.textContent = getText('dashboard.notes');
  if (pinnedTasksTitle) pinnedTasksTitle.textContent = getText('dashboard.tasks');
  
  // Overview szekci√≥
  const overviewTitle = document.querySelector('#overview-section .section-header h2');
  const statisticsTitle = document.querySelector('#main-stats-panel h3');
  const levelTitle = document.querySelector('.level-card h3');
  const activityGraphTitle = document.querySelector('.activity-graph h3');
  const productivityTitle = document.querySelector('.productivity-insights h3');
  
  if (overviewTitle) overviewTitle.textContent = getText('overview.title');
  if (statisticsTitle) statisticsTitle.textContent = getText('overview.statistics');
  if (levelTitle) levelTitle.textContent = getText('overview.level');
  if (activityGraphTitle) activityGraphTitle.textContent = getText('overview.activity_graph');
  if (productivityTitle) productivityTitle.textContent = getText('overview.productivity');
  
  // Stat cards
  const statLabels = document.querySelectorAll('.stat-label');
  if (statLabels[0]) statLabels[0].textContent = getText('overview.lists');
  if (statLabels[1]) statLabels[1].textContent = getText('overview.items');
  if (statLabels[2]) statLabels[2].textContent = getText('overview.completed');
  if (statLabels[3]) statLabels[3].textContent = getText('overview.completion');
  
  // Activity legend
  const activityLegendItems = document.querySelectorAll('.activity-legend-item span');
  if (activityLegendItems[0]) activityLegendItems[0].textContent = getText('overview.activity_less');
  if (activityLegendItems[1]) activityLegendItems[1].textContent = getText('overview.activity_medium');
  if (activityLegendItems[2]) activityLegendItems[2].textContent = getText('overview.activity_high');
  
  // Activity stats labels
  const activityStatLabels = document.querySelectorAll('.activity-stat-label');
  if (activityStatLabels[0]) activityStatLabels[0].textContent = getText('overview.activity_total');
  if (activityStatLabels[1]) activityStatLabels[1].textContent = getText('overview.activity_streak');
  if (activityStatLabels[2]) activityStatLabels[2].textContent = getText('overview.activity_avg');
  
  // Quick task modal
  const quickTaskModalTitle = document.querySelector('#quick-task-modal h3');
  const quickTaskInput = document.getElementById('quick-task-text');
  const quickTaskSelect = document.getElementById('quick-task-list-select');
  const quickTaskSubmitBtn = document.getElementById('quick-task-submit');
  const quickTaskCancelBtn = document.getElementById('quick-task-cancel');
  
  if (quickTaskModalTitle) quickTaskModalTitle.textContent = getText('modals.quick_task.title');
  if (quickTaskInput) quickTaskInput.placeholder = getText('modals.quick_task.placeholder');
  if (quickTaskSubmitBtn) quickTaskSubmitBtn.textContent = getText('modals.quick_task.add');
  if (quickTaskCancelBtn) quickTaskCancelBtn.textContent = getText('modals.quick_task.cancel');
  
  // List√°k szekci√≥ ford√≠t√°sa
  const listsTitle = document.querySelector('#lists-section .section-header h2');
  const createNewListBtn = document.getElementById('create-new-list-btn');
  const listNameInput = document.getElementById('list-name');
  const listCategoryInput = document.getElementById('list-category');
  const createListBtn = document.getElementById('create-list-btn');
  const reorderBtn = document.getElementById('toggle-reorder-btn');
  
  if (listsTitle) listsTitle.textContent = getText('lists.title');
  if (createNewListBtn) createNewListBtn.textContent = getText('lists.create_new');
  if (listNameInput) listNameInput.placeholder = getText('lists.list_name_placeholder');
  if (listCategoryInput) listCategoryInput.placeholder = getText('lists.category_placeholder');
  if (createListBtn) createListBtn.textContent = getText('lists.create_list');
  if (reorderBtn) {
    updateButtonText(reorderBtn, getText('lists.reorder'));
  }
  
  // Jegyzetek szekci√≥ ford√≠t√°sa
  const notesTitle = document.querySelector('#notes-section .section-header h2');
  const newNoteBtn = document.getElementById('new-note-btn');
  
  if (notesTitle) notesTitle.textContent = getText('notes.title');
  if (newNoteBtn) newNoteBtn.textContent = getText('notes.new_note');
  
  // Napt√°r szekci√≥ ford√≠t√°sa
  const calendarTitle = document.querySelector('#calendar-section .section-header h2');
  const newEventBtn = document.getElementById('new-event-btn');
  const upcomingEventsTitle = document.querySelector('.upcoming-events h3');
  
  if (calendarTitle) calendarTitle.textContent = getText('calendar.title');
  if (newEventBtn) newEventBtn.textContent = getText('calendar.new_event');
  if (upcomingEventsTitle) upcomingEventsTitle.textContent = getText('calendar.upcoming_events');
  
  // Event modal ford√≠t√°sa
  const eventModalTitle = document.getElementById('event-modal-title');
  const eventTitleInput = document.getElementById('event-title');
  const eventDateInput = document.getElementById('event-date');
  const eventTimeInput = document.getElementById('event-time');
  const eventDescInput = document.getElementById('event-description');
  const saveEventBtn = document.getElementById('save-event');
  const cancelEventBtn = document.getElementById('cancel-event');
  
  if (eventModalTitle) eventModalTitle.textContent = getText('calendar.new_event');
  if (eventTitleInput) eventTitleInput.placeholder = getText('calendar.event_title');
  if (eventDescInput) eventDescInput.placeholder = getText('calendar.event_description');
  if (saveEventBtn) saveEventBtn.textContent = getText('calendar.save_event');
  if (cancelEventBtn) cancelEventBtn.textContent = getText('calendar.cancel');
  
  // Note modal ford√≠t√°sa
  const noteModalTitle = document.getElementById('note-modal-title');
  const noteTitleInput = document.getElementById('note-title');
  const noteContentInput = document.getElementById('note-content');
  const saveNoteBtn = document.getElementById('save-note');
  const cancelNoteBtn = document.getElementById('cancel-note');
  
  if (noteModalTitle) noteModalTitle.textContent = getText('notes.note_title');
  if (noteTitleInput) noteTitleInput.placeholder = getText('notes.title_placeholder');
  if (noteContentInput) noteContentInput.placeholder = getText('notes.content_placeholder');
  if (saveNoteBtn) saveNoteBtn.textContent = getText('notes.save');
  if (cancelNoteBtn) cancelNoteBtn.textContent = getText('notes.cancel');
  

  
  // Napt√°r h√≥napok √©s napok nevei (dinamikusan gener√°lt tartalom)
  updateCalendarLocales();
  
  // Create panel ford√≠t√°sa
  const createHeader = document.querySelector('.create-header h3');
  const createListNameLabel = document.querySelector('label[for="custom-list-name-input"]');
  const createListCategoryLabel = document.querySelector('label[for="custom-list-category-input"]');
  const customCreateListBtn = document.getElementById('custom-new-list-btn');
  const createListNameInput = document.getElementById('custom-list-name-input');
  const createListCategoryInput = document.getElementById('custom-list-category-input');
  
  if (createHeader) createHeader.textContent = getText('lists.create_new');
  if (createListNameLabel) createListNameLabel.textContent = getText('lists.list_name');
  if (createListCategoryLabel) createListCategoryLabel.textContent = getText('lists.category');
  if (createListNameInput) createListNameInput.placeholder = getText('lists.list_name_placeholder');
  if (createListCategoryInput) createListCategoryInput.placeholder = getText('lists.category_placeholder');
  if (customCreateListBtn) {
    updateButtonText(customCreateListBtn, getText('lists.create_list'));
  }
  
  // Filter panel ford√≠t√°sa
  const filterHeader = document.querySelector('.filter-header h3');
  const filterCategoryLabel = document.querySelector('label[for="filter-category"]');
  const searchLabel = document.querySelector('label[for="search-input"]');
  const searchInput = document.getElementById('search-input');
  const allCategoriesOption = document.querySelector('#filter-category option[value="all"]');
  
  if (filterHeader) filterHeader.textContent = getText('lists.filter_search');
  if (filterCategoryLabel) filterCategoryLabel.textContent = getText('lists.filter_category');
  if (searchLabel) searchLabel.textContent = getText('lists.search');
  if (searchInput) searchInput.placeholder = getText('lists.search_placeholder');
  if (allCategoriesOption) allCategoriesOption.textContent = getText('lists.all_categories');
  
  // Toggle reorder button ford√≠t√°sa
  if (toggleReorderBtn) {
    updateButtonText(toggleReorderBtn, getText('lists.reorder'));
  }
  
  // Jegyzetek t√∂rl√©si modal ford√≠t√°sa
  const deleteNoteTitle = document.querySelector('#delete-note-modal .modal-header h3');
  const deleteNoteConfirm = document.querySelector('#delete-note-modal .warning-content p');
  const deleteNoteWarning = document.querySelector('#delete-note-modal .warning-text');
  const deleteNoteBtn = document.getElementById('confirm-delete-note');
  const cancelDeleteNoteBtn = document.getElementById('cancel-delete-note');
  
  if (deleteNoteTitle) deleteNoteTitle.textContent = getText('notes.delete_note');
  if (deleteNoteConfirm) deleteNoteConfirm.textContent = getText('notes.delete_confirm');
  if (deleteNoteWarning) deleteNoteWarning.textContent = getText('notes.delete_warning');
  if (deleteNoteBtn) deleteNoteBtn.textContent = getText('notes.delete_button');
  if (cancelDeleteNoteBtn) cancelDeleteNoteBtn.textContent = getText('notes.cancel');
  
  // S√ºrg≈ës feladatok "nincs s√ºrg≈ës" sz√∂vege
  const noUrgentElements = document.querySelectorAll('.no-urgent');
  noUrgentElements.forEach(el => {
    if (el) el.textContent = getText('dashboard.no_urgent');
  });
  
  // Note categories select opci√≥k
  const noteCategorySelect = document.getElementById('note-category');
  if (noteCategorySelect) {
    noteCategorySelect.innerHTML = `
      <option value="general">${getText('notes.categories.general')}</option>
      <option value="passwords">${getText('notes.categories.passwords')}</option>
      <option value="ideas">${getText('notes.categories.ideas')}</option>
      <option value="important">${getText('notes.categories.important')}</option>
      <option value="work">${getText('notes.categories.work')}</option>
      <option value="personal">${getText('notes.categories.personal')}</option>
    `;
  }
  
  // Event type select opci√≥k
  const eventTypeSelect = document.getElementById('event-type');
  if (eventTypeSelect) {
    eventTypeSelect.innerHTML = `
      <option value="birthday">${getText('calendar.event_types.birthday')}</option>
      <option value="meeting">${getText('calendar.event_types.meeting')}</option>
      <option value="reminder">${getText('calendar.event_types.reminder')}</option>
      <option value="appointment">${getText('calendar.event_types.appointment')}</option>
      <option value="event">${getText('calendar.event_types.event')}</option>
      <option value="deadline">${getText('calendar.event_types.deadline')}</option>
    `;
  }
  
  // Reminder times select opci√≥k
  const reminderTimeSelect = document.getElementById('reminder-time');
  if (reminderTimeSelect) {
    reminderTimeSelect.innerHTML = `
      <option value="0">${getText('calendar.reminder_times.0')}</option>
      <option value="15">${getText('calendar.reminder_times.15')}</option>
      <option value="30">${getText('calendar.reminder_times.30')}</option>
      <option value="60">${getText('calendar.reminder_times.60')}</option>
      <option value="1440">${getText('calendar.reminder_times.1440')}</option>
    `;
  }
  
  // Event modal input labelek
  const eventDateLabel = document.querySelector('label[for="event-date"]');
  const eventTimeLabel = document.querySelector('label[for="event-time"]');
  const eventTypeLabel = document.querySelector('label[for="event-type"]');
  const eventReminderLabel = document.querySelector('label[for="event-reminder"]');
  
  if (eventDateLabel) eventDateLabel.textContent = getText('calendar.date_label');
  if (eventTimeLabel) eventTimeLabel.textContent = getText('calendar.time_label');
  if (eventTypeLabel) eventTypeLabel.textContent = getText('calendar.type_label');
  if (eventReminderLabel) eventReminderLabel.textContent = getText('calendar.reminder_label');
  
  // Event modal placeholder sz√∂vegek
  const modalEventTitleInput = document.getElementById('event-title');
  const modalEventDescInput = document.getElementById('event-description');
  if (modalEventTitleInput) modalEventTitleInput.placeholder = getText('calendar.event_name_placeholder');
  if (modalEventDescInput) modalEventDescInput.placeholder = getText('calendar.event_desc_placeholder');
  
  // Produktivit√°si insights friss√≠t√©se (lokaliz√°lt)
  updateProductivityInsights();
  
  // Confirm modal sz√∂vegek
  const confirmMessage = document.getElementById('confirm-message');
  const confirmYes = document.getElementById('confirm-yes');
  const confirmNo = document.getElementById('confirm-no');
  
  if (confirmYes) confirmYes.textContent = getText('modals.yes');
  if (confirmNo) confirmNo.textContent = getText('modals.no');
  
  // Quick add modal sz√∂vegek (FAB modal)
  const quickAddTitle = document.querySelector('#quick-add-modal h3');
  const quickAddInput = document.getElementById('quick-add-text');
  const quickAddSubmit = document.getElementById('quick-add-submit');
  const quickAddCancel = document.getElementById('quick-add-cancel');
  
  if (quickAddTitle) quickAddTitle.textContent = getText('modals.quick_add.title');
  if (quickAddInput) quickAddInput.placeholder = getText('modals.quick_add.placeholder');
  if (quickAddSubmit) quickAddSubmit.textContent = getText('modals.quick_add.add');
  if (quickAddCancel) quickAddCancel.textContent = getText('modals.quick_add.cancel');
  
  // Item input placeholder friss√≠t√©se (dinamikusan l√©trehozott elemekhez)
  updateItemInputPlaceholders();
  
  // Quick add lista select friss√≠t√©se
  populateQuickTaskListSelect();
  
  // D√°tum friss√≠t√©se lokaliz√°ci√≥val
  updateCurrentTime();
  
  // Achievement sz√∂vegek friss√≠t√©se
  updateAchievements();
  
  // Theme modal sz√∂vegek friss√≠t√©se
  const themeText = document.querySelector('.theme-text');
  if (themeText) {
    themeText.textContent = getText('common.theme');
  }
  
  // Theme modal c√≠me √©s gombok
  const themeModalTitle = document.querySelector('#theme-modal .modern-theme-header h2');
  const themeApplyBtn = document.getElementById('theme-apply-btn');
  const themeCancelBtn = document.getElementById('theme-cancel-btn');
  
  if (themeModalTitle) themeModalTitle.textContent = getText('modals.theme.title');
  if (themeApplyBtn) {
    updateButtonText(themeApplyBtn, getText('modals.theme.apply'));
  }
  if (themeCancelBtn) {
    updateButtonText(themeCancelBtn, getText('modals.theme.cancel'));
  }
  
  // Theme k√°rtya sz√∂vegek friss√≠t√©se
  updateThemeCardTexts();
  
  // Kateg√≥ria sz≈±r≈ë friss√≠t√©se (ha van felhaszn√°l√≥ bejelentkezve)
  if (auth.currentUser) {
    loadUserLists(auth.currentUser.uid);
  }
  
  // Profile menu gombok friss√≠t√©se
  const privacyMenuBtn = document.getElementById('privacy-btn');
  if (privacyMenuBtn) {
    updateButtonText(privacyMenuBtn, getText('navigation.privacy'));
  }

  // Modal select opci√≥k friss√≠t√©se
  updateModalSelectOptions();
}

// Modal select opci√≥k friss√≠t√©se
function updateModalSelectOptions() {
  // Event t√≠pusok friss√≠t√©se
  const eventTypeOptions = document.querySelectorAll('#event-type option');
  eventTypeOptions.forEach(option => {
    const value = option.value;
    if (value) {
      option.textContent = getText(`calendar.event_types.${value}`);
    }
  });
  
  // Event eml√©keztet≈ë opci√≥k friss√≠t√©se
  const reminderOptions = document.querySelectorAll('#reminder-time option');
  reminderOptions.forEach(option => {
    const value = option.value;
    if (value !== undefined) {
      option.textContent = getText(`calendar.reminder_times.${value}`);
    }
  });
  
  // Note kateg√≥ri√°k friss√≠t√©se
  const noteCategoryOptions = document.querySelectorAll('#note-category option');
  noteCategoryOptions.forEach(option => {
    const value = option.value;
    if (value) {
      option.textContent = getText(`notes.categories.${value}`);
    }
  });
  
  // Event modal c√≠mk√©k friss√≠t√©se
  const eventDateLabelEl = document.querySelector('.date-time-group .input-group:first-child label');
  const eventTimeLabelEl = document.querySelector('.date-time-group .input-group:last-child label');
  const eventTypeLabelEl = document.querySelector('.event-categories label');
  
  if (eventDateLabelEl) eventDateLabelEl.textContent = getText('calendar.date_label');
  if (eventTimeLabelEl) eventTimeLabelEl.textContent = getText('calendar.time_label');
  if (eventTypeLabelEl) eventTypeLabelEl.textContent = getText('calendar.type_label');
  
  // Event eml√©keztet≈ë c√≠mke friss√≠t√©se
  const eventReminderLabelEl = document.querySelector('.reminder-settings .checkbox-label');
  if (eventReminderLabelEl) {
    const textNode = Array.from(eventReminderLabelEl.childNodes).find(node => 
      node.nodeType === Node.TEXT_NODE && node.textContent.trim()
    );
    if (textNode) {
      textNode.textContent = getText('calendar.reminder_label');
    }
  }
  
  // Note kateg√≥ria c√≠mke friss√≠t√©se
  const noteCategoryLabelEl = document.querySelector('.note-categories label');
  if (noteCategoryLabelEl) noteCategoryLabelEl.textContent = getText('notes.category_label');
  
  // Note private checkbox c√≠mke friss√≠t√©se
  const notePrivateLabelEl = document.querySelector('.note-security .checkbox-label');
  if (notePrivateLabelEl) {
    // Keress√ºk meg az utols√≥ text node-ot (ami a checkbox sz√∂vege)
    const textNodes = Array.from(notePrivateLabelEl.childNodes).filter(node => node.nodeType === Node.TEXT_NODE);
    if (textNodes.length > 0) {
      const lastTextNode = textNodes[textNodes.length - 1];
      lastTextNode.textContent = getText('notes.private_note');
    }
  }
  
  // Jelsz√≥ mez≈ëk friss√≠t√©se
  const notePasswordInput = document.getElementById('note-password');
  const notePasswordLabel = document.getElementById('note-password-label');
  const passwordModalTitle = document.getElementById('password-modal-title');
  const passwordInput = document.getElementById('password-input');
  const passwordSubmit = document.getElementById('password-submit');
  const passwordCancel = document.getElementById('password-cancel');
  
  if (notePasswordInput) {
    notePasswordInput.placeholder = getText('notes.password_placeholder');
  }
  if (notePasswordLabel) {
    notePasswordLabel.textContent = getText('notes.password_label');
  }
  if (passwordModalTitle) {
    passwordModalTitle.textContent = getText('notes.password_needed');
  }
  if (passwordInput) {
    passwordInput.placeholder = getText('notes.password_placeholder_input');
  }
  if (passwordSubmit) {
    passwordSubmit.textContent = getText('notes.password_submit');
  }
  if (passwordCancel) {
    passwordCancel.textContent = getText('notes.password_cancel');
  }
}

// Nyelv dropdown inicializ√°l√°sa
function initLanguageDropdown() {
  const hamburgerIcon = document.getElementById('hamburger-icon');
  const languageDropdown = document.getElementById('language-dropdown');
  
  if (hamburgerIcon && languageDropdown) {
    // Aktu√°lis nyelv jelz√©se
    markCurrentLanguage();
    
    hamburgerIcon.addEventListener('click', (e) => {
      e.stopPropagation();
      languageDropdown.classList.toggle('show');
      
      // Ha megnyitjuk, t√°vol√≠tsuk el az inline style-t
      if (languageDropdown.classList.contains('show')) {
        languageDropdown.style.display = '';
      } else {
        languageDropdown.style.display = 'none';
      }
    });
    
    // K√≠v√ºlre kattint√°s eset√©n bez√°r√°s
    document.addEventListener('click', (e) => {
      if (!hamburgerIcon.contains(e.target) && !languageDropdown.contains(e.target)) {
        languageDropdown.classList.remove('show');
        languageDropdown.style.display = 'none';
      }
    });
    
    // ESC billenty≈± lenyom√°sakor bez√°r√°s
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && languageDropdown.classList.contains('show')) {
        languageDropdown.classList.remove('show');
        languageDropdown.style.display = 'none';
      }
    });
    
    // Nyelv linkekre kattint√°s - JSON alap√∫ v√°lt√°s
    const languageLinks = languageDropdown.querySelectorAll('a');
    languageLinks.forEach(link => {
      link.addEventListener('click', async (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        const languageCode = link.getAttribute('data-lang') || 'hu';
        
        // Dropdown azonnal bez√°r√°sa a nyelv v√°lt√°s el≈ëtt
        languageDropdown.classList.remove('show');
        languageDropdown.style.display = 'none'; // Er≈ës override
        
        try {
          await loadLanguage(languageCode);
          markCurrentLanguage();
          
          // Biztons√°gos bez√°r√°s a nyelv v√°lt√°s ut√°n is
          setTimeout(() => {
            languageDropdown.classList.remove('show');
            languageDropdown.style.display = 'none';
          }, 100);
        } catch (error) {
          console.error('Hiba a nyelv bet√∂lt√©se sor√°n:', error);
        }
      });
    });
  }
}

// Aktu√°lis nyelv jel√∂l√©se
function markCurrentLanguage() {
  const languageLinks = document.querySelectorAll('.language-dropdown a');
  const languageText = document.querySelector('.language-text');
  
  languageLinks.forEach(link => {
    link.classList.remove('current');
    
    // Ellen≈ërizz√ºk az aktu√°lis nyelvet
    const linkLang = link.getAttribute('data-lang');
    if (linkLang === currentLanguage) {
      link.classList.add('current');
      
      // Friss√≠tj√ºk a hamburger men√º sz√∂veg√©t
      if (languageText) {
        switch(currentLanguage) {
          case 'en':
            languageText.textContent = 'EN';
            break;
          case 'de':
            languageText.textContent = 'DE';
            break;
          case 'hu':
          default:
            languageText.textContent = 'HU';
            break;
        }
      }
    }
  });
}

// Glob√°lis f√ºggv√©nyek el√©rhet≈ëv√© t√©tele
window.editNote = editNote;
window.deleteNote = deleteNote;
window.togglePinNote = togglePinNote;
window.deleteEvent = deleteEvent;
window.togglePinList = togglePinList;
window.switchToListsTab = switchToListsTab;
window.openNoteForEdit = openNoteForEdit;
window.requestNotePassword = requestNotePassword;

// Lista kiemel√©s/kiemel√©s elt√°vol√≠t√°sa
function togglePinList(listId) {
  if (!auth.currentUser) return;
  
  const listRef = ref(db, `users/${auth.currentUser.uid}/lists/${listId}`);
  
  get(listRef).then((snapshot) => {
    if (snapshot.exists()) {
      const currentPinned = snapshot.val().pinned || false;
      
      update(listRef, { 
        pinned: !currentPinned,
        updatedAt: new Date().toISOString()
      }).then(() => {
        updatePinnedTasks();
        showNotification(!currentPinned ? 'üìå Lista kiemelt!' : 'üìå Kiemel√©s elt√°vol√≠tva!');
      });
    }
  });
}

// ===============================================
// üöÄ QUICK TASK MODAL FUNCTIONS
// ===============================================

function openQuickTaskModal() {
  if (quickTaskModal) {
    populateQuickTaskListSelect();
    quickTaskModal.style.display = 'flex';
    if (quickTaskText) quickTaskText.focus();
  }
}

function populateQuickTaskListSelect() {
  if (!quickTaskListSelect || !auth.currentUser) return;
  
  quickTaskListSelect.innerHTML = `<option value="">${getText('modals.quick_task.select_list')}</option>`;
  
  const listsRef = ref(db, `users/${auth.currentUser.uid}/lists`);
  onValue(listsRef, (snapshot) => {
    if (snapshot.exists()) {
      const lists = snapshot.val();
      Object.keys(lists).forEach(listId => {
        const list = lists[listId];
        const option = document.createElement('option');
        option.value = listId;
        option.textContent = list.name;
        quickTaskListSelect.appendChild(option);
      });
    }
  });
}

function submitQuickTask() {
  const taskText = quickTaskText.value.trim();
  const selectedListId = quickTaskListSelect.value;
  
  if (!taskText || !selectedListId) {
    const message = currentLanguage === 'en' ? 'Please fill in the task text and choose a list!' : 
                   currentLanguage === 'de' ? 'Bitte f√ºllen Sie den Aufgabentext aus und w√§hlen Sie eine Liste!' : 
                   'K√©rj√ºk, t√∂ltsd ki a feladat sz√∂veg√©t √©s v√°lassz egy list√°t!';
    alert(message);
    return;
  }
  
  if (!auth.currentUser) {
    alert(getText('notifications.login_required'));
    return;
  }
  
  const listItemsRef = ref(db, `users/${auth.currentUser.uid}/lists/${selectedListId}/items`);
  push(listItemsRef, {
    text: taskText,
    done: false,
    createdAt: new Date().toISOString(),
    timestamp: Date.now()
  }).then(async () => {
    quickTaskText.value = '';
    quickTaskModal.style.display = 'none';
    showNotification(getText('notifications.task_added'));
    addXP(5); // XP hozz√°ad√°sa
    
    // Teljes adatfriss√≠t√©s
    await forceRefreshAllData();
  }).catch(error => {
    console.error('Hiba a feladat hozz√°ad√°sa sor√°n:', error);
    alert('Hiba t√∂rt√©nt a feladat hozz√°ad√°sa sor√°n.');
  });
}

function closeQuickTaskModal() {
  if (quickTaskModal) {
    quickTaskModal.style.display = 'none';
    quickTaskText.value = '';
  }
}

// S√ºrg≈ës feladatok kezel√©se
function togglePinUrgentTask(listId, taskId) {
  if (!auth.currentUser) return;
  
  const taskRef = ref(db, `users/${auth.currentUser.uid}/lists/${listId}/items/${taskId}`);
  
  get(taskRef).then((snapshot) => {
    if (snapshot.exists()) {
      const currentPinned = snapshot.val().pinned || false;
      
      update(taskRef, { 
        pinned: !currentPinned,
        updatedAt: new Date().toISOString()
      }).then(() => {
        updateUrgentTasks();
        updatePinnedTasks();
        showNotification(!currentPinned ? getText('notifications.task_pinned') : getText('notifications.task_unpinned'));
      });
    }
  });
}

function markUrgentTaskDone(listId, taskId) {
  if (!auth.currentUser) return;
  
  const taskRef = ref(db, `users/${auth.currentUser.uid}/lists/${listId}/items/${taskId}`);
  
  update(taskRef, { 
    done: true,
    completedAt: new Date().toISOString()
  }).then(async () => {
    updateUrgentTasks();
    addXP(5); // XP a feladat teljes√≠t√©s√©√©rt
    showNotification(getText('notifications.task_completed'));
    await forceRefreshAllData();
  });
}

// Helper funkci√≥k a ford√≠t√°sokhoz
function updateCalendarLocales() {
  // Napt√°r lokaliz√°ci√≥ja a renderCalendar funkci√≥n√°l t√∂rt√©nik
  if (document.getElementById('calendar-grid')) {
    renderCalendar();
  }
}



function updateItemInputPlaceholders() {
  // Dinamikusan l√©trehozott item inputok friss√≠t√©se
  setTimeout(() => {
    const itemInputs = document.querySelectorAll('.item-input');
    itemInputs.forEach(input => {
      if (input) input.placeholder = getText('dashboard.item_placeholder');
    });
  }, 100);
}

// Theme k√°rtya sz√∂vegek friss√≠t√©se
function updateThemeCardTexts() {
  // T√©ma k√°rty√°k sz√∂vegei
  const themeCards = {
    'default': {
      name: getText('modals.theme.themes.default.name'),
      description: getText('modals.theme.themes.default.description')
    },
    'ocean-blue': {
      name: getText('modals.theme.themes.ocean_blue.name'),
      description: getText('modals.theme.themes.ocean_blue.description')
    },
    'sakura-pink': {
      name: getText('modals.theme.themes.sakura_pink.name'),
      description: getText('modals.theme.themes.sakura_pink.description')
    },
    'forest-green': {
      name: getText('modals.theme.themes.forest_green.name'),
      description: getText('modals.theme.themes.forest_green.description')
    },
    'minimal-mono': {
      name: getText('modals.theme.themes.minimal_mono.name'),
      description: getText('modals.theme.themes.minimal_mono.description')
    },
    'sunset-orange': {
      name: getText('modals.theme.themes.sunset_orange.name'),
      description: getText('modals.theme.themes.sunset_orange.description')
    },
    'royal-purple': {
      name: getText('modals.theme.themes.royal_purple.name'),
      description: getText('modals.theme.themes.royal_purple.description')
    }
  };
  
  // Friss√≠tj√ºk minden t√©ma k√°rtya sz√∂veg√©t
  Object.keys(themeCards).forEach(themeKey => {
    const themeCard = document.querySelector(`[data-theme="${themeKey}"]`);
    if (themeCard) {
      const nameElement = themeCard.querySelector('h3');
      const descElement = themeCard.querySelector('p');
      
      if (nameElement) nameElement.textContent = themeCards[themeKey].name;
      if (descElement) descElement.textContent = themeCards[themeKey].description;
    }
  });
  
  // Theme mode gombok sz√∂vegei
  const lightModeButtons = document.querySelectorAll('.theme-mode-btn[data-mode="light"]');
  const darkModeButtons = document.querySelectorAll('.theme-mode-btn[data-mode="dark"]');
  
  lightModeButtons.forEach(button => {
    const textNode = Array.from(button.childNodes).find(node => node.nodeType === Node.TEXT_NODE);
    if (textNode) {
      textNode.textContent = ` ${getText('modals.theme.modes.light')}`;
    }
  });
  
  darkModeButtons.forEach(button => {
    const textNode = Array.from(button.childNodes).find(node => node.nodeType === Node.TEXT_NODE);
    if (textNode) {
      textNode.textContent = ` ${getText('modals.theme.modes.dark')}`;
    }
  });
}

// Modern t√©ma v√°laszt√≥ rendszer
function initThemeSelector() {
  const themeSelector = document.getElementById('theme-selector-btn');
  const themeModal = document.getElementById('theme-modal');
  const themeModalClose = document.getElementById('theme-modal-close');
  const themeApplyBtn = document.getElementById('theme-apply-btn');
  const themeCancelBtn = document.getElementById('theme-cancel-btn');
  const themeCards = document.querySelectorAll('.modern-theme-card');
  const themeModeButtons = document.querySelectorAll('.theme-mode-btn');
  
  if (!themeSelector || !themeModal) return;
  
  // Load saved theme
  const savedTheme = JSON.parse(localStorage.getItem('selectedTheme') || '{"name":"default","mode":"light"}');
  currentTheme = savedTheme;
  applyTheme(currentTheme.name, currentTheme.mode);
  updateActiveThemeCard();
  
  let selectedTheme = { ...currentTheme };
  
  // Open modal
  themeSelector.addEventListener('click', (e) => {
    e.stopPropagation();
    themeModal.style.display = 'flex';
    selectedTheme = { ...currentTheme };
    updateActiveThemeCard();
  });
  
  // Close modal and revert theme
  const closeModal = () => {
    themeModal.style.display = 'none';
    selectedTheme = { ...currentTheme };
    // Vissza√°ll√≠tjuk az eredeti t√©m√°t
    applyTheme(currentTheme.name, currentTheme.mode);
    updateActiveThemeCard();
  };
  
  if (themeModalClose) themeModalClose.addEventListener('click', closeModal);
  if (themeCancelBtn) themeCancelBtn.addEventListener('click', closeModal);
  
  // Close modal when clicking outside
  themeModal.addEventListener('click', (e) => {
    if (e.target === themeModal) {
      closeModal();
    }
  });
  
  // Theme card selection
  themeCards.forEach(card => {
    card.addEventListener('click', () => {
      const themeName = card.dataset.theme;
      
      // Update selected theme with current mode
      selectedTheme.name = themeName;
      window.selectedTheme = selectedTheme;
      
      // Apply theme with live preview
      applyTheme(selectedTheme.name, selectedTheme.mode);
      updateActiveThemeCard();
    });
  });
  
  // Theme mode button selection
  themeModeButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      e.stopPropagation();
      
      const mode = button.dataset.mode;
      const card = button.closest('.modern-theme-card');
      const themeName = card.dataset.theme;
      
      // Update selected theme
      selectedTheme = { name: themeName, mode: mode };
      window.selectedTheme = selectedTheme;
      
      // Apply theme with live preview
      applyTheme(selectedTheme.name, selectedTheme.mode);
      updateActiveThemeCard();
    });
  });
  
  // Apply selected theme
  if (themeApplyBtn) {
    themeApplyBtn.addEventListener('click', () => {
      selectTheme(selectedTheme.name, selectedTheme.mode);
      themeModal.style.display = 'none';
    });
  }
}

function selectTheme(themeName, themeMode) {
  currentTheme = { name: themeName, mode: themeMode };
  
  // Save to localStorage
  localStorage.setItem('selectedTheme', JSON.stringify(currentTheme));
  
  // Apply theme
  applyTheme(themeName, themeMode);
  updateActiveThemeCard();
  
  // Save to Firebase if user is logged in
  if (auth.currentUser) {
    saveThemeToFirebase(currentTheme);
  }
  
  // Show notification
  showNotification(`üé® ${getText('notifications.theme_applied')}: ${themeName} (${themeMode})`);
}

function applyTheme(themeName, themeMode) {
  const root = document.documentElement;
  
  // Remove all theme classes
  root.className = root.className.replace(/theme-\w+/g, '');
  
  // Set theme data attributes
  root.setAttribute('data-theme', themeMode);
  
  // Add theme class
  if (themeName !== 'default') {
    root.classList.add(`theme-${themeName}`);
  }
  
  // Load theme CSS if needed
  loadThemeCSS(themeName);
}

function loadThemeCSS(themeName) {
  const existingLink = document.getElementById('theme-css');
  
  if (themeName === 'default') {
    if (existingLink) {
      existingLink.remove();
    }
    return;
  }
  
  if (!existingLink) {
    const link = document.createElement('link');
    link.id = 'theme-css';
    link.rel = 'stylesheet';
    link.href = 'modern-themes.css';
    document.head.appendChild(link);
  }
}

function updateActiveThemeCard() {
  const themeCards = document.querySelectorAll('.modern-theme-card');
  const themeModeButtons = document.querySelectorAll('.theme-mode-btn');
  const themeModal = document.getElementById('theme-modal');
  
  // Ha a modal nyitva van, haszn√°ljuk a selectedTheme-t, k√ºl√∂nben a currentTheme-t
  let targetTheme = currentTheme;
  if (themeModal && themeModal.style.display === 'flex' && window.selectedTheme) {
    targetTheme = window.selectedTheme;
  }
  
  // Reset all cards and buttons
  themeCards.forEach(card => {
    card.classList.remove('selected');
  });
  
  themeModeButtons.forEach(button => {
    button.classList.remove('active');
  });
  
  // Set active card and mode
  themeCards.forEach(card => {
    if (card.dataset.theme === targetTheme.name) {
      card.classList.add('selected');
      
      // Set active mode button within this card
      const modeButtons = card.querySelectorAll('.theme-mode-btn');
      modeButtons.forEach(button => {
        if (button.dataset.mode === targetTheme.mode) {
          button.classList.add('active');
        }
      });
    }
  });
}

async function saveThemeToFirebase(themeSettings) {
  if (!auth.currentUser) return;
  
  try {
    const userRef = ref(db, `users/${auth.currentUser.uid}/themeSettings`);
    await set(userRef, themeSettings);
  } catch (error) {
    console.log('Theme save error:', error);
  }
}

async function loadThemeFromFirebase() {
  if (!auth.currentUser) return;
  
  try {
    const userRef = ref(db, `users/${auth.currentUser.uid}/themeSettings`);
    const userSnap = await get(userRef);
    
    if (userSnap.exists()) {
      const savedTheme = userSnap.val();
      currentTheme = savedTheme;
      localStorage.setItem('selectedTheme', JSON.stringify(currentTheme));
      applyTheme(currentTheme.name, currentTheme.mode);
      updateActiveThemeCard();
    }
  } catch (error) {
    console.log('Theme load error:', error);
  }
}

// Profile men√º inicializ√°l√°sa
function initProfileMenu() {
  const profileBtn = document.getElementById('profile-btn');
  const profileDropdown = document.getElementById('profile-dropdown');
  const logoutBtn = document.getElementById('logout-btn');
  const privacyBtn = document.getElementById('privacy-btn');
  
  if (!profileBtn || !profileDropdown || !logoutBtn) return;
  
  // Profile gomb kattint√°s
  profileBtn.addEventListener('click', (e) => {
    e.stopPropagation();
    profileDropdown.classList.toggle('show');
  });
  
  // K√≠v√ºlre kattint√°s eset√©n bez√°r√°s
  document.addEventListener('click', (e) => {
    if (!profileBtn.contains(e.target) && !profileDropdown.contains(e.target)) {
      profileDropdown.classList.remove('show');
    }
  });
  
  // ESC billenty≈± lenyom√°sakor bez√°r√°s
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && profileDropdown.classList.contains('show')) {
      profileDropdown.classList.remove('show');
    }
  });
  
  // Privacy gomb
  if (privacyBtn) {
    privacyBtn.addEventListener('click', () => {
      openPrivacyModal();
      profileDropdown.classList.remove('show');
    });
  }
  
  // Logout gomb
  logoutBtn.addEventListener('click', () => {
    if (confirm(getText('auth.logout') + '?')) {
      signOut(auth).then(() => {
        profileDropdown.classList.remove('show');
        showNotification('üëã ' + getText('notifications.logout_success'));
      }).catch((error) => {
        console.error('Kijelentkez√©si hiba:', error);
      });
    }
  });
}

// Privacy modal functions
function openPrivacyModal() {
  const privacyModal = document.getElementById('privacy-modal');
  if (privacyModal) {
    // Friss√≠tj√ºk a modal sz√∂vegeit a jelenlegi nyelv szerint
    updatePrivacyModalTexts();
    privacyModal.style.display = 'flex';
  }
}

function closePrivacyModal() {
  const privacyModal = document.getElementById('privacy-modal');
  if (privacyModal) {
    privacyModal.style.display = 'none';
  }
}

function updatePrivacyModalTexts() {
  // Modal c√≠me
  const title = document.getElementById('privacy-modal-title');
  if (title) title.textContent = getText('modals.privacy.title');

  // Szekci√≥ c√≠mek √©s tartalmak
  const sections = [
    { titleId: 'privacy-intro-title', contentId: 'privacy-intro-content', key: 'intro' },
    { titleId: 'privacy-controller-title', contentId: 'privacy-controller-content', key: 'controller' },
    { titleId: 'privacy-data-title', key: 'data' },
    { titleId: 'privacy-purpose-title', key: 'purpose' },
    { titleId: 'privacy-legal-title', contentId: 'privacy-legal-content', key: 'legal' },
    { titleId: 'privacy-storage-title', contentId: 'privacy-storage-content', key: 'storage' },
    { titleId: 'privacy-retention-title', contentId: 'privacy-retention-content', key: 'retention' },
    { titleId: 'privacy-rights-title', key: 'rights' },
    { titleId: 'privacy-security-title', key: 'security' },
    { titleId: 'privacy-contact-title', contentId: 'privacy-contact-content', key: 'contact' },
    { titleId: 'privacy-changes-title', contentId: 'privacy-changes-content', key: 'changes' },
    { titleId: 'privacy-effective-title', contentId: 'privacy-effective-content', key: 'effective' }
  ];

  sections.forEach(section => {
    const titleElement = document.getElementById(section.titleId);
    const contentElement = section.contentId ? document.getElementById(section.contentId) : null;
    
    if (titleElement) {
      titleElement.textContent = getText(`modals.privacy.${section.key}_title`);
    }
    
    if (contentElement) {
      contentElement.textContent = getText(`modals.privacy.${section.key}_content`);
    }
  });

  // Lista elemek friss√≠t√©se
  const dataItems = [
    { id: 'privacy-data-email', key: 'data_email' },
    { id: 'privacy-data-lists', key: 'data_lists' },
    { id: 'privacy-data-notes', key: 'data_notes' },
    { id: 'privacy-data-events', key: 'data_events' },
    { id: 'privacy-data-settings', key: 'data_settings' },
    { id: 'privacy-data-usage', key: 'data_usage' }
  ];

  dataItems.forEach(item => {
    const element = document.getElementById(item.id);
    if (element) {
      element.textContent = getText(`modals.privacy.${item.key}`);
    }
  });

  const purposeItems = [
    { id: 'privacy-purpose-service', key: 'purpose_service' },
    { id: 'privacy-purpose-sync', key: 'purpose_sync' },
    { id: 'privacy-purpose-security', key: 'purpose_security' },
    { id: 'privacy-purpose-features', key: 'purpose_features' }
  ];

  purposeItems.forEach(item => {
    const element = document.getElementById(item.id);
    if (element) {
      element.textContent = getText(`modals.privacy.${item.key}`);
    }
  });

  const rightsItems = [
    { id: 'privacy-right-access', key: 'right_access' },
    { id: 'privacy-right-rectification', key: 'right_rectification' },
    { id: 'privacy-right-erasure', key: 'right_erasure' },
    { id: 'privacy-right-portability', key: 'right_portability' },
    { id: 'privacy-right-objection', key: 'right_objection' }
  ];

  rightsItems.forEach(item => {
    const element = document.getElementById(item.id);
    if (element) {
      element.textContent = getText(`modals.privacy.${item.key}`);
    }
  });

  const securityItems = [
    { id: 'privacy-security-encryption', key: 'security_encryption' },
    { id: 'privacy-security-firebase', key: 'security_firebase' },
    { id: 'privacy-security-https', key: 'security_https' },
    { id: 'privacy-security-access', key: 'security_access' }
  ];

  securityItems.forEach(item => {
    const element = document.getElementById(item.id);
    if (element) {
      element.textContent = getText(`modals.privacy.${item.key}`);
    }
  });

  // Gombok
  const acceptBtn = document.getElementById('privacy-accept');
  const closeBtn = document.getElementById('privacy-close');
  
  if (acceptBtn) acceptBtn.textContent = getText('modals.privacy.accept');
  if (closeBtn) closeBtn.textContent = getText('modals.privacy.close');
}

// Glob√°lis f√ºggv√©ny el√©rhet≈ëv√© t√©tele
window.openQuickTaskModal = openQuickTaskModal;
window.submitQuickTask = submitQuickTask;
window.closeQuickTaskModal = closeQuickTaskModal;
window.togglePinUrgentTask = togglePinUrgentTask;
window.markUrgentTaskDone = markUrgentTaskDone;
window.destroySortableInstance = destroySortableInstance;

// Privacy modal esem√©nykezel≈ëk inicializ√°l√°sa
function initPrivacyModal() {
  const privacyModalClose = document.getElementById('privacy-modal-close');
  const privacyAccept = document.getElementById('privacy-accept');
  const privacyClose = document.getElementById('privacy-close');
  const privacyModal = document.getElementById('privacy-modal');

  if (privacyModalClose) {
    privacyModalClose.addEventListener('click', closePrivacyModal);
  }

  if (privacyAccept) {
    privacyAccept.addEventListener('click', closePrivacyModal);
  }

  if (privacyClose) {
    privacyClose.addEventListener('click', closePrivacyModal);
  }

  // K√≠v√ºlre kattint√°s eset√©n bez√°r√°s
  if (privacyModal) {
    privacyModal.addEventListener('click', (e) => {
      if (e.target === privacyModal) {
        closePrivacyModal();
      }
    });
  }

  // ESC billenty≈± lenyom√°sakor bez√°r√°s
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      if (privacyModal && privacyModal.style.display === 'flex') {
        closePrivacyModal();
      }
    }
  });
}

// Sortable inicializ√°l√°s k√©sleltet√©se DOM bet√∂lt√©s ut√°n
document.addEventListener('DOMContentLoaded', () => {
  // Privacy modal inicializ√°l√°sa
  initPrivacyModal();
  
  // AUDIO USER INTERACTION RENDSZER INICIALIZ√ÅL√ÅS
  enableAudioOnUserInteraction();
  console.log('üéµ Audio user interaction system initialized');
  
  // PWA FLOATING INSTALL BUTTON SETUP
  function setupPWAInstallButton() {
    const installContainer = document.getElementById('pwa-floating-install');
    const installBtn = document.getElementById('pwa-install-btn');
    
    // Debug: elemek ellen≈ërz√©se
    console.log('üîß PWA Elements Check:');
    console.log('  - installContainer:', !!installContainer);
    console.log('  - installBtn:', !!installBtn);
    console.log('  - deferredPrompt:', !!deferredPrompt);
    
    if (!installContainer || !installBtn) {
      console.error('‚ùå PWA install elements not found in DOM!');
      return { showInstallButton: () => {}, hideInstallButton: () => {}, checkInstallStatus: () => false };
    }
    
    // PWA telep√≠thet≈ës√©g √©s √°llapot ellen≈ërz√©se
    function canShowInstallButton() {
      // Csak akkor jelen√≠tj√ºk meg, ha:
      // 1. Van el√©rhet≈ë install prompt (deferredPrompt)
      // 2. NEM standalone m√≥dban vagyunk (nem telep√≠tett PWA)
      // 3. NEM a getDisplayMode() szerint standalone
      // 4. localStorage nem jelzi, hogy nemr√©g volt telep√≠tve
      
      const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
      const isInstalled = window.navigator.standalone === true; // iOS Safari
      const wasRecentlyInstalled = localStorage.getItem('pwa-recently-installed');
      const userDismissedRecently = localStorage.getItem('pwa-user-dismissed');
      
      // Ha nemr√©g telep√≠tett√©k vagy elutas√≠tott√°k, ne jelenjen meg
      if (wasRecentlyInstalled || userDismissedRecently) {
        return false;
      }
      
      return deferredPrompt && !isStandalone && !isInstalled;
    }
    
    // Gomb megjelen√≠t√©se
    function showInstallButton() {
      if (canShowInstallButton()) {
        installContainer.style.display = 'block';
        console.log('üì± PWA floating install button shown');
      }
    }
    
    // Gomb elrejt√©se
    function hideInstallButton() {
      installContainer.style.display = 'none';
      console.log('üì± PWA install button hidden');
    }
    
    // PWA telep√≠t√©s kezel√©se
    if (installBtn) {
      installBtn.addEventListener('click', () => {
        if (deferredPrompt) {
          deferredPrompt.prompt();
          deferredPrompt.userChoice.then((choiceResult) => {
            if (choiceResult.outcome === 'accepted') {
              console.log('‚úÖ PWA installation accepted');
              showNotification('üì± App sikeresen telep√≠tve!');
              hideInstallButton();
              // Jegyezz√ºk meg, hogy telep√≠tett√©k
              localStorage.setItem('pwa-recently-installed', Date.now().toString());
            } else {
              console.log('‚ùå PWA installation declined');
              // Jegyezz√ºk meg, hogy elutas√≠tott√°k (24 √≥r√°ra)
              const dismissTime = Date.now() + (24 * 60 * 60 * 1000); // 24 √≥ra
              localStorage.setItem('pwa-user-dismissed', dismissTime.toString());
              hideInstallButton();
              console.log('üîï PWA gomb elrejtve 24 √≥r√°ra felhaszn√°l√≥i k√©r√©sre');
            }
            deferredPrompt = null;
          });
        } else {
          console.log('PWA m√°r telep√≠tve vagy nem t√°mogatott');
          showNotification('üì± Az alkalmaz√°s m√°r telep√≠tve van');
          hideInstallButton();
        }
      });
    }
    
    // PWA telep√≠t√©si √°llapot ellen≈ërz√©se √©s localStorage tiszt√≠t√°sa
    function checkInstallStatus() {
      // localStorage id≈ëz√≠t√©sek ellen≈ërz√©se √©s tiszt√≠t√°sa
      const wasRecentlyInstalled = localStorage.getItem('pwa-recently-installed');
      const userDismissedTime = localStorage.getItem('pwa-user-dismissed');
      
      if (wasRecentlyInstalled) {
        // Ha 30 napn√°l r√©gebben telep√≠tett√©k, t√∂r√∂lj√ºk a jel√∂l√©st
        const installedTime = parseInt(wasRecentlyInstalled);
        if (Date.now() - installedTime > (30 * 24 * 60 * 60 * 1000)) { // 30 nap
          localStorage.removeItem('pwa-recently-installed');
          console.log('üßπ PWA installed flag cleared after 30 days');
        }
      }
      
      if (userDismissedTime) {
        // Ha lej√°rt az elutas√≠t√°s id≈ëz√≠t√©se, t√∂r√∂lj√ºk
        const dismissTime = parseInt(userDismissedTime);
        if (Date.now() > dismissTime) {
          localStorage.removeItem('pwa-user-dismissed');
          console.log('üßπ PWA dismissed flag cleared after timeout');
        }
      }
      
      // Ha m√°r telep√≠tve van PWA m√≥dban, rejtj√ºk a gombot
      const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
      const isInstalled = window.navigator.standalone === true; // iOS Safari
      
      if (isStandalone || isInstalled) {
        hideInstallButton();
        console.log('üì± PWA already installed - hiding install button');
        // Jegyezz√ºk meg, hogy telep√≠tve van
        if (!wasRecentlyInstalled) {
          localStorage.setItem('pwa-recently-installed', Date.now().toString());
        }
        return false;
      }
      return true;
    }
    
    // Kezdeti ellen≈ërz√©s
    if (checkInstallStatus() && deferredPrompt) {
      showInstallButton();
    }
    
    // Debug funkci√≥k console-b√≥l
    window.showPWAButton = () => {
      if (installContainer) {
        installContainer.style.display = 'block';
        console.log('üîß DEBUG: PWA button forced to show');
      } else {
        console.error('‚ùå Install container not found!');
      }
    };
    
    window.hidePWAButton = () => {
      if (installContainer) {
        installContainer.style.display = 'none';
        console.log('üîß DEBUG: PWA button hidden');
      } else {
        console.error('‚ùå Install container not found!');
      }
    };
    
    window.debugPWA = () => {
      console.log('üîß PWA DEBUG INFO:');
      console.log('  - installContainer:', installContainer);
      console.log('  - installBtn:', installBtn);
      console.log('  - deferredPrompt:', deferredPrompt);
      console.log('  - display-mode:', window.matchMedia('(display-mode: standalone)').matches);
      console.log('  - current display:', installContainer ? installContainer.style.display : 'N/A');
    };
    
    // Automatikus megjelen√≠t√©s tesztel√©shez (csak ha enged√©lyezett)
    console.log('üîß No deferredPrompt available yet - use showPWAButton() to test UI');
    setTimeout(() => {
      // Csak akkor jelen√≠tj√ºk meg automatikusan, ha minden felt√©tel teljes√ºl
      if (canShowInstallButton() || !deferredPrompt) {
        const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
        const wasRecentlyInstalled = localStorage.getItem('pwa-recently-installed');
        const userDismissed = localStorage.getItem('pwa-user-dismissed');
        
        if (!isStandalone && !wasRecentlyInstalled && !userDismissed) {
          installContainer.style.display = 'block';
          console.log('üîß AUTO-SHOWING PWA button for testing purposes');
          console.log('üì± PWA button should now be visible in bottom-left corner');
        } else {
          console.log('üîï PWA button auto-show skipped - user preferences/status');
        }
      }
    }, 3000);
    
    return { showInstallButton, hideInstallButton, checkInstallStatus };
  }
  
  // PWA setup inicializ√°l√°sa
  const pwaInstall = setupPWAInstallButton();
  
  // Glob√°lis f√ºggv√©ny konzolb√≥l val√≥ haszn√°latra
  window.installPWA = function() {
    const installBtn = document.getElementById('pwa-install-btn');
    if (installBtn) {
      installBtn.click();
    } else {
      console.error('‚ùå PWA install button not found!');
    }
  };
  
  // Backup glob√°lis f√ºggv√©nyek (ha a setupPWAInstallButton nem futott le)
  if (!window.showPWAButton) {
    window.showPWAButton = () => {
      const container = document.getElementById('pwa-floating-install');
      if (container) {
        container.style.display = 'block';
        console.log('üîß BACKUP: PWA button shown');
      } else {
        console.error('‚ùå PWA container not found!');
      }
    };
  }
  
  if (!window.hidePWAButton) {
    window.hidePWAButton = () => {
      const container = document.getElementById('pwa-floating-install');
      if (container) {
        container.style.display = 'none';
        console.log('üîß BACKUP: PWA button hidden');
      } else {
        console.error('‚ùå PWA container not found!');
      }
    };
  }
  
  if (!window.debugPWA) {
    window.debugPWA = () => {
      const container = document.getElementById('pwa-floating-install');
      const btn = document.getElementById('pwa-install-btn');
      console.log('üîß BACKUP PWA DEBUG:');
      console.log('  - container:', !!container);
      console.log('  - button:', !!btn);
      console.log('  - display:', container ? container.style.display : 'N/A');
    };
  }
  
  // V√°rjunk egy kicsit, hogy minden elem biztosan bet√∂lt√∂dj√∂n
  setTimeout(() => {
    if (listsContainer && toggleReorderBtn) {
      // Inicializ√°ljuk a sortable-t ha sz√ºks√©ges
      initializeSortable();
    }
  }, 500);
});

// =================================
// SNOOZE RENDSZER JAV√çT√ÅSA
// =================================

// Rendszeres ellen≈ërz√©s glob√°lis timer
let snoozeCheckInterval = null;

// Rendszeres snooze ellen≈ërz√©s ind√≠t√°sa
function startSnoozeMonitoring() {
  // Ha m√°r fut, ne ind√≠tsuk √∫jra
  if (snoozeCheckInterval) {
    clearInterval(snoozeCheckInterval);
  }
  
  // Ellen≈ërz√©s minden 30 m√°sodpercben
  snoozeCheckInterval = setInterval(() => {
    checkSnoozedNotifications();
  }, 30000); // 30 m√°sodpercenk√©nt
  
  console.log('Snooze monitoring started - checking every 30 seconds');
}

// Snooze monitoring le√°ll√≠t√°sa
function stopSnoozeMonitoring() {
  if (snoozeCheckInterval) {
    clearInterval(snoozeCheckInterval);
    snoozeCheckInterval = null;
    console.log('Snooze monitoring stopped');
  }
}
