// =================================
// SIMPLE TARGET GROUP SYSTEM
// =================================

import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
import {
  getDatabase, ref, push, set, get
} from "https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js";
import {
  getAuth
} from "https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js";

console.log('üéØ Loading simple target group system...');

// Firebase konfigur√°ci√≥ - ugyanaz mint az index.js-ben
const firebaseConfig = {
  apiKey: "AIzaSyBLrDOTSC_bA1mxQpaIfyAz-Eyan26TVT0",
  authDomain: "leads-tracker-app-78b83.firebaseapp.com",
  databaseURL: "https://leads-tracker-app-78b83-default-rtdb.europe-west1.firebasedatabase.app/",
  projectId: "leads-tracker-app-78b83",
  storageBucket: "leads-tracker-app-78b83.appspot.com",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "1:907489703312:web:c4138807d8a7aa96512f15"
};

const app = initializeApp(firebaseConfig);
const db = getDatabase(app);
const auth = getAuth(app);

// Biztons√°gos showNotification f√ºggv√©ny
function showNotificationSafe(message) {
  if (typeof window.showNotification === 'function') {
    window.showNotification(message);
  } else if (typeof showNotification === 'function') {
    showNotification(message);
  } else {
    console.log('Notification:', message);
    alert(message);
  }
}

// Target Groups adatai
const TARGET_GROUPS = {
  student: { id: 'student', icon: 'üéì', color: '#3498db', name: 'Di√°k' },
  young_professional: { id: 'young_professional', icon: 'üíº', color: '#e74c3c', name: 'Fiatal Szakember' },
  self_developer: { id: 'self_developer', icon: 'üå±', color: '#27ae60', name: '√ñnfejleszt≈ë' },
  organizer: { id: 'organizer', icon: 'üìã', color: '#f39c12', name: 'Szervez≈ë' }
};

// Profil dropdown b≈ëv√≠t√©se
function addTargetGroupToProfile() {
  console.log('üéØ Adding target group to profile...');
  
  const profileDropdown = document.getElementById('profile-dropdown');
  if (!profileDropdown) {
    console.warn('‚ùå Profile dropdown not found');
    return;
  }
  
  // Ellen≈ërizz√ºk, hogy m√°r hozz√° van-e adva
  if (document.getElementById('target-group-item')) {
    console.log('‚úÖ Target group already in profile');
    return;
  }
  
  // √öj elem l√©trehoz√°sa
  const targetGroupItem = document.createElement('div');
  targetGroupItem.id = 'target-group-item';
  targetGroupItem.className = 'privacy-menu-btn';
  targetGroupItem.style.cursor = 'pointer';
  targetGroupItem.innerHTML = 'üéØ C√©lcsoport';
  
  // Event listener hozz√°ad√°sa
  targetGroupItem.addEventListener('click', () => {
    profileDropdown.classList.remove('show');
    showTargetGroupModal();
  });
  
  // Hozz√°ad√°s a privacy gomb el√©
  const privacyBtn = document.getElementById('privacy-btn');
  if (privacyBtn && privacyBtn.parentNode) {
    privacyBtn.parentNode.insertBefore(targetGroupItem, privacyBtn);
  } else {
    profileDropdown.appendChild(targetGroupItem);
  }
  
  console.log('‚úÖ Target group added to profile dropdown');
}

// Target group modal megjelen√≠t√©se
function showTargetGroupModal() {
  console.log('üéØ Showing target group modal...');
  
  // Ha m√°r l√©tezik, t√°vol√≠tsuk el
  const existingModal = document.getElementById('target-group-modal');
  if (existingModal) {
    existingModal.remove();
  }
  
  // Modal l√©trehoz√°sa
  const modal = document.createElement('div');
  modal.id = 'target-group-modal';
  modal.className = 'modal';
  modal.style.display = 'flex';
  
  const cardsHtml = Object.values(TARGET_GROUPS).map(group => `
    <div class="target-group-card" data-group="${group.id}" 
         style="border: 2px solid ${group.color}; border-radius: 10px; padding: 15px; text-align: center; cursor: pointer; transition: all 0.3s ease; background: white;">
      <div style="font-size: 2rem; margin-bottom: 10px;">${group.icon}</div>
      <div style="font-weight: bold; color: ${group.color}; font-size: 14px;">${group.name}</div>
    </div>
  `).join('');
  
  modal.innerHTML = `
    <div class="modal-content" style="max-width: 600px;">
      <div class="modal-header">
        <h3>üéØ C√©lcsoport v√°laszt√°sa</h3>
        <button class="close-btn" onclick="closeTargetGroupModal()">√ó</button>
      </div>
      <div class="modal-body" style="padding: 20px;">
        <p style="margin-bottom: 20px; text-align: center;">V√°laszd ki a c√©lcsoportodat sablon feladatok gener√°l√°s√°hoz:</p>
        <div id="target-group-options" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 15px;">
          ${cardsHtml}
        </div>
      </div>
      <div class="modal-footer">
        <button onclick="closeTargetGroupModal()" class="secondary-btn">Bez√°r√°s</button>
      </div>
    </div>
  `;
  
  document.body.appendChild(modal);
  
  // K√°rtya kattint√°s event √©s hover effektek
  document.querySelectorAll('.target-group-card').forEach(card => {
    card.addEventListener('click', () => {
      const groupId = card.dataset.group;
      selectTargetGroup(groupId);
    });
    
    card.addEventListener('mouseenter', () => {
      card.style.transform = 'scale(1.05)';
      card.style.boxShadow = '0 5px 15px rgba(0,0,0,0.2)';
    });
    
    card.addEventListener('mouseleave', () => {
      card.style.transform = 'scale(1)';
      card.style.boxShadow = 'none';
    });
  });
}

// Target group kiv√°laszt√°sa
async function selectTargetGroup(groupId) {
  console.log('üéØ Selected target group:', groupId);
  
  if (!auth.currentUser) {
    console.warn('‚ùå No authenticated user');
    showNotificationSafe('‚ùå Nincs bejelentkezett felhaszn√°l√≥');
    return;
  }
  
  try {
    // Ment√°s Firebase-be
    await set(ref(db, `users/${auth.currentUser.uid}/targetGroup`), groupId);
    
    showNotificationSafe(`‚úÖ C√©lcsoport be√°ll√≠tva: ${TARGET_GROUPS[groupId].name}`);
    
    closeTargetGroupModal();
    
    // Template feladatok gener√°l√°sa
    generateSimpleTemplateTasks(groupId);
    
  } catch (error) {
    console.error('‚ùå Error saving target group:', error);
    showNotificationSafe('‚ùå Hiba t√∂rt√©nt a c√©lcsoport ment√©sekor');
  }
}

// Template feladatok gener√°l√°sa
async function generateSimpleTemplateTasks(groupId) {
  console.log('üìù Generating simple template tasks for:', groupId);
  
  const templates = {
    student: ['Tanul√°s', 'H√°zi feladat', 'Vizsg√°ra k√©sz√ºl√©s', 'Jegyzetel√©s', 'K√∂nyvt√°ri kutat√°s'],
    young_professional: ['Networking esem√©ny', 'LinkedIn friss√≠t√©s', 'Prezent√°ci√≥ k√©sz√≠t√©s', 'Mentor tal√°lkoz√≥', 'Tanfolyam keres√©s'],
    self_developer: ['Napi medit√°ci√≥', '√öj k√©szs√©g tanul√°sa', 'K√∂nyv olvas√°s', '√ñn√©rt√©kel√©s', 'Napl√≥ √≠r√°s'],
    organizer: ['Esem√©ny tervez√©s', 'Csapat meeting', 'Projekt koordin√°l√°s', 'Vend√©g megh√≠v√°s', 'K√∂lts√©gvet√©s tervez√©s']
  };
  
  const taskList = templates[groupId] || [];
  if (taskList.length === 0) return;
  
  try {
    // Lista l√©trehoz√°sa
    const listsRef = ref(db, `users/${auth.currentUser.uid}/lists`);
    const newListRef = push(listsRef);
    
    await set(newListRef, {
      name: `${TARGET_GROUPS[groupId].name} feladatok`,
      category: 'template',
      order: Date.now(),
      items: {}
    });
    
    // Feladatok hozz√°ad√°sa
    const itemsRef = ref(db, `users/${auth.currentUser.uid}/lists/${newListRef.key}/items`);
    
    for (const task of taskList) {
      const taskRef = push(itemsRef);
      await set(taskRef, {
        text: task,
        done: false,
        created: Date.now()
      });
    }
    
    showNotificationSafe(`üìù ${taskList.length} sablon feladat l√©trehozva!`);
    
    // List√°k √∫jrat√∂lt√©se ha a funkci√≥ el√©rhet≈ë
    if (typeof window.loadUserLists === 'function' && auth.currentUser) {
      setTimeout(() => {
        window.loadUserLists(auth.currentUser.uid);
      }, 500);
    } else if (typeof loadUserLists === 'function' && auth.currentUser) {
      setTimeout(() => {
        loadUserLists(auth.currentUser.uid);
      }, 500);
    }
    
  } catch (error) {
    console.error('‚ùå Error generating template tasks:', error);
    showNotificationSafe('‚ùå Hiba t√∂rt√©nt a sablon feladatok l√©trehoz√°sakor');
  }
}

// Modal bez√°r√°sa
function closeTargetGroupModal() {
  const modal = document.getElementById('target-group-modal');
  if (modal) {
    modal.remove();
  }
}

// Glob√°lis f√ºggv√©nyek
window.closeTargetGroupModal = closeTargetGroupModal;
window.showTargetGroupModal = showTargetGroupModal;
window.selectTargetGroup = selectTargetGroup;
window.addTargetGroupToProfile = addTargetGroupToProfile;

// Auto inicializ√°l√°s DOM ready ut√°n
document.addEventListener('DOMContentLoaded', () => {
  // V√°runk egy kicsit, hogy a f≈ëoldal inicializ√°l√≥djon
  setTimeout(() => {
    if (document.getElementById('profile-dropdown')) {
      addTargetGroupToProfile();
      console.log('‚úÖ Target group auto-initialized');
    } else {
      console.log('‚è≥ Profile dropdown not ready, retrying...');
      setTimeout(() => {
        if (document.getElementById('profile-dropdown')) {
          addTargetGroupToProfile();
          console.log('‚úÖ Target group initialized on retry');
        }
      }, 2000);
    }
  }, 1000);
});

console.log('‚úÖ Simple target group system loaded'); 